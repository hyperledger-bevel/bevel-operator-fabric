on:
  push:
  pull_request:


name: Test Kubectl plugin
jobs:
  kubectl-hlf:
    strategy:
      matrix:
        go-version: [ 1.18.x ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    env:
      IMAGE: hlf-operator
      TAG: test
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.2.0
        with:
          cluster_name: kind
          node_image: kindest/node:v1.22.7

      - name: Install kubectl plugin
        run: |
          cd kubectl-hlf
          go build -o kubectl-hlf ./main.go
          sudo mv kubectl-hlf /usr/local/bin/kubectl-hlf
      - name: Build Docker Image
        run: |
          export GOOS=linux
          export GOARCH=amd64
          export CGO_ENABLED=0
          go build -o hlf-operator ./main.go
          docker build -t "${IMAGE}:${TAG}" .
          kind load docker-image "${IMAGE}:${TAG}"
      - name: Deploy operator
        run: |
          helm repo add kfs https://kfsoftware.github.io/hlf-helm-charts --force-update
          helm install hlf-operator --version=1.8.0-beta5 kfs/hlf-operator --set image.repository="${IMAGE}" --set image.tag="${TAG}" --set image.pullPolicy="IfNotPresent"

      - name: Install operator CRDs
        run: |
          go install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.3.0
          make generate manifests install

      - name: Create Peer org
        run: |
          export PEER_IMAGE=hyperledger/fabric-peer
          export PEER_VERSION=2.4.3

          export ORDERER_IMAGE=hyperledger/fabric-orderer
          export ORDERER_VERSION=2.4.3

          kubectl hlf ca create --storage-class=standard --capacity=2Gi --name=org1-ca \
              --enroll-id=enroll --enroll-pw=enrollpw  
          kubectl wait --timeout=180s --for=condition=Running fabriccas.hlf.kungfusoftware.es --all    

          # register user for the peers
          kubectl hlf ca register --name=org1-ca --user=peer --secret=peerpw --type=peer \
          --enroll-id enroll --enroll-secret=enrollpw --mspid Org1MSP


          kubectl hlf peer create --statedb=couchdb --image=$PEER_IMAGE --version=$PEER_VERSION --storage-class=standard --enroll-id=peer --mspid=Org1MSP \
                  --enroll-pw=peerpw --capacity=5Gi --name=org1-peer0 --ca-name=org1-ca.default
          kubectl wait --timeout=180s --for=condition=Running fabricpeers.hlf.kungfusoftware.es --all
      - name: Create Orderer Org
        run: |
          export ORDERER_IMAGE=hyperledger/fabric-orderer
          export ORDERER_VERSION=2.4.3

          kubectl hlf ca create --storage-class=standard --capacity=2Gi --name=ord-ca \
              --enroll-id=enroll --enroll-pw=enrollpw
          kubectl wait --timeout=180s --for=condition=Running fabriccas.hlf.kungfusoftware.es --all
          kubectl hlf ca register --name=ord-ca --user=orderer --secret=ordererpw \
              --type=orderer --enroll-id enroll --enroll-secret=enrollpw --mspid=OrdererMSP

          kubectl hlf ordnode create --image=$ORDERER_IMAGE --version=$ORDERER_VERSION \
              --storage-class=standard --enroll-id=orderer --mspid=OrdererMSP \
              --enroll-pw=ordererpw --capacity=2Gi --name=ord-node1 --ca-name=ord-ca.default
          kubectl wait --timeout=180s --for=condition=Running fabricorderernodes.hlf.kungfusoftware.es --all
      - name: Prepare Connection string for Orderer Node
        run: |
          kubectl hlf inspect --output ordservice.yaml -o OrdererMSP
          kubectl hlf ca register --name=ord-ca --user=admin --secret=adminpw \
              --type=admin --enroll-id enroll --enroll-secret=enrollpw --mspid=OrdererMSP

          kubectl hlf ca enroll --name=ord-ca --user=admin --secret=adminpw --mspid OrdererMSP \
                  --ca-name ca  --output admin-ordservice.yaml 
          ## add user from admin-ordservice.yaml to ordservice.yaml
          kubectl hlf utils adduser --userPath=admin-ordservice.yaml --config=ordservice.yaml --username=admin --mspid=OrdererMSP

      - name: Prepare credentials for orderer
        run: |
          kubectl hlf channel generate --output=demo.block --name=demo --organizations Org1MSP --ordererOrganizations OrdererMSP

          # enroll using the TLS CA
          kubectl hlf ca enroll --name=ord-ca --namespace=default --user=admin --secret=adminpw --mspid OrdererMSP \
                  --ca-name tlsca  --output admin-tls-ordservice.yaml 

      - name: Prepare connection string for Peer
        run: |
          kubectl hlf ca register --name=org1-ca --user=admin --secret=adminpw --type=admin \
          --enroll-id enroll --enroll-secret=enrollpw --mspid Org1MSP  

          kubectl hlf ca enroll --name=org1-ca --user=admin --secret=adminpw --mspid Org1MSP \
                  --ca-name ca  --output peer-org1.yaml

          kubectl hlf inspect --output org1.yaml -o Org1MSP -o OrdererMSP

          ## add user key and cert to org1.yaml from admin-ordservice.yaml
          kubectl hlf utils adduser --userPath=peer-org1.yaml --config=org1.yaml --username=admin --mspid=Org1MSP
      - name: Create a channel
        run: |

          kubectl create secret generic wallet --namespace=default \
                  --from-file=peer-org1.yaml=$PWD/peer-org1.yaml \
                  --from-file=admin-tls-ordservice.yaml=$PWD/admin-tls-ordservice.yaml
          kubectl get fabricorderernodes ord-node1 -o jsonpath='{.status.tlsCert}' > ./orderer-cert.pem

          kubectl hlf channelcrd main create \
              --channel-name=demo \
              --name=demo \
              --orderer-orgs=OrdererMSP \
              --peer-orgs=Org1MSP \
              --admin-orderer-orgs=OrdererMSP \
              --admin-peer-orgs=Org1MSP \
              --secret-name=wallet \
              --secret-ns=default \
              --consenters=ord-node1.default:7050 \
              --consenter-certificates=./orderer-cert.pem \
              --identities="OrdererMSP;admin-tls-ordservice.yaml" \
              --identities="Org1MSP;peer-org1.yaml"

          kubectl wait --timeout=180s --for=condition=Created fabricmainchannels.hlf.kungfusoftware.es --all 


      - name: Join peers to channel
        run: |
          kubectl get fabricorderernodes ord-node1 -o jsonpath='{.status.tlsCert}' > ./orderer-cert.pem
          kubectl hlf channelcrd follower create \
              --channel-name=demo \
              --mspid=Org1MSP \
              --name="demo-org1msp" \
              --orderer-certificates="./orderer-cert.pem" \
              --orderer-urls="grpcs://ord-node1.default:7050" \
              --anchor-peers="org1-peer0:7051" \
              --peers="org1-peer0.default" \
              --secret-name=wallet \
              --secret-ns=default \
              --secret-key="peer-org1.yaml"

          kubectl wait --timeout=180s --for=condition=Created fabricfollowerchannels.hlf.kungfusoftware.es --all 
      - name: Get channel
        run: |
          sleep 3

          kubectl hlf channel inspect --channel=demo --config=org1.yaml \
              --user=admin -p=org1-peer0.default > demo.json

          cat demo.json
      - name: Install/Approve/Commit chaincode
        run: |
          # remove the code.tar.gz asset-transfer-basic-external.tgz if they exist
          export CHAINCODE_NAME=asset
          export CHAINCODE_LABEL=asset
          cat << METADATA-EOF > "metadata.json"
          {
              "type": "ccaas",
              "label": "${CHAINCODE_LABEL}"
          }
          METADATA-EOF

          cat > "connection.json" <<CONN_EOF
          {
            "address": "${CHAINCODE_NAME}:7052",
            "dial_timeout": "10s",
            "tls_required": false
          }
          CONN_EOF

          tar cfz code.tar.gz connection.json
          tar cfz asset-transfer-basic-external.tgz metadata.json code.tar.gz
          export PACKAGE_ID=$(kubectl hlf chaincode calculatepackageid --path=asset-transfer-basic-external.tgz --language=node --label=$CHAINCODE_LABEL)
          echo "PACKAGE_ID=$PACKAGE_ID"

          kubectl hlf chaincode install --path=./asset-transfer-basic-external.tgz \
              --config=org1.yaml --language=golang --label=$CHAINCODE_LABEL --user=admin --peer=org1-peer0.default

          # this can take 3-4 minutes
          kubectl hlf externalchaincode sync --image=kfsoftware/chaincode-external:latest \
              --name=$CHAINCODE_NAME \
              --namespace=default \
              --package-id=$PACKAGE_ID \
              --tls-required=false \
              --replicas=1
          export SEQUENCE=1
          export VERSION="1.0"
          kubectl hlf chaincode approveformyorg --config=org1.yaml --user=admin --peer=org1-peer0.default \
              --package-id=$PACKAGE_ID \
              --version "$VERSION" --sequence "$SEQUENCE" --name=asset \
              --policy="OR('Org1MSP.member')" --channel=demo
          kubectl hlf chaincode commit --config=org1.yaml --user=admin --mspid=Org1MSP \
              --version "$VERSION" --sequence "$SEQUENCE" --name=asset \
              --policy="OR('Org1MSP.member')" --channel=demo

      - name: Test chaincode
        run: |
          sleep 10
          echo "waiting for deployment to be ready"
          kubectl wait --timeout=180s --for=condition=Available deployment asset --namespace=default    
          kubectl hlf chaincode invoke --config=org1.yaml \
              --user=admin --peer=org1-peer0.default \
              --chaincode=asset --channel=demo \
              --fcn=initLedger -a '[]'

          kubectl hlf chaincode query --config=org1.yaml \
              --user=admin --peer=org1-peer0.default \
              --chaincode=asset --channel=demo \
              --fcn=GetAllAssets -a '[]'

      - name: Show information
        if: ${{ failure() }}
        run: |
          kubectl get nodes -o=wide
          kubectl get pods -o=wide -A
          kubectl get fabricpeers.hlf.kungfusoftware.es  -A -o=custom-columns='NAME:metadata.name,NAMESPACE:metadata.namespace,STATE:status.status,MESSAGE:status.message'
          kubectl get fabricorderernodes.hlf.kungfusoftware.es  -A -o=custom-columns='NAME:metadata.name,NAMESPACE:metadata.namespace,STATE:status.status,MESSAGE:status.message'
          kubectl get fabriccas.hlf.kungfusoftware.es -A -o=custom-columns='NAME:metadata.name,NAMESPACE:metadata.namespace,STATE:status.status,MESSAGE:status.message'
          kubectl get fabricmainchannels.hlf.kungfusoftware.es -A -o=custom-columns='NAME:metadata.name,NAMESPACE:metadata.namespace,STATE:status.status,MESSAGE:status.message'
          kubectl get fabricfollowerchannels.hlf.kungfusoftware.es -A -o=custom-columns='NAME:metadata.name,NAMESPACE:metadata.namespace,STATE:status.status,MESSAGE:status.message'

          POD=$(kubectl get pod -l 'release in (org1-peer0)'  -o jsonpath="{.items[0].metadata.name}")
          kubectl logs $POD -c peer

          POD=$(kubectl get pod -l 'release in (ord-node1)'  -o jsonpath="{.items[0].metadata.name}")
          kubectl logs $POD
