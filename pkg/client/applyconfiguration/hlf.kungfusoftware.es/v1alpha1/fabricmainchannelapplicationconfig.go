// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// FabricMainChannelApplicationConfigApplyConfiguration represents an declarative configuration of the FabricMainChannelApplicationConfig type for use
// with apply.
type FabricMainChannelApplicationConfigApplyConfiguration struct {
	Capabilities []string                                                      `json:"capabilities,omitempty"`
	Policies     *map[string]FabricMainChannelPoliciesConfigApplyConfiguration `json:"policies,omitempty"`
	ACLs         *map[string]string                                            `json:"acls,omitempty"`
}

// FabricMainChannelApplicationConfigApplyConfiguration constructs an declarative configuration of the FabricMainChannelApplicationConfig type for use with
// apply.
func FabricMainChannelApplicationConfig() *FabricMainChannelApplicationConfigApplyConfiguration {
	return &FabricMainChannelApplicationConfigApplyConfiguration{}
}

// WithCapabilities adds the given value to the Capabilities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Capabilities field.
func (b *FabricMainChannelApplicationConfigApplyConfiguration) WithCapabilities(values ...string) *FabricMainChannelApplicationConfigApplyConfiguration {
	for i := range values {
		b.Capabilities = append(b.Capabilities, values[i])
	}
	return b
}

// WithPolicies sets the Policies field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Policies field is set to the value of the last call.
func (b *FabricMainChannelApplicationConfigApplyConfiguration) WithPolicies(value map[string]FabricMainChannelPoliciesConfigApplyConfiguration) *FabricMainChannelApplicationConfigApplyConfiguration {
	b.Policies = &value
	return b
}

// WithACLs sets the ACLs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ACLs field is set to the value of the last call.
func (b *FabricMainChannelApplicationConfigApplyConfiguration) WithACLs(value map[string]string) *FabricMainChannelApplicationConfigApplyConfiguration {
	b.ACLs = &value
	return b
}
