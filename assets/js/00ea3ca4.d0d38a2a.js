"use strict";(self.webpackChunkwebsite_docs=self.webpackChunkwebsite_docs||[]).push([[6676],{7792:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"user-guide/hashicorp-vault","title":"HashiCorp Vault Integration","description":"This workshop provides a comprehensive, hands-on guide to integrating HashiCorp Vault with the Bevel Operator for Hyperledger Fabric. You\'ll learn how to securely manage certificates, private keys, and cryptographic materials using Vault\'s advanced secrets management capabilities.","source":"@site/docs/user-guide/hashicorp-vault.md","sourceDirName":"user-guide","slug":"/user-guide/hashicorp-vault","permalink":"/bevel-operator-fabric/docs/user-guide/hashicorp-vault","draft":false,"unlisted":false,"editUrl":"https://github.com/hyperledger-bevel/bevel-operator-fabric/edit/master/website/docs/user-guide/hashicorp-vault.md","tags":[],"version":"current","frontMatter":{"id":"hashicorp-vault","title":"HashiCorp Vault Integration"},"sidebar":"mainSidebar","previous":{"title":"Using network config in the kubernetes cluster","permalink":"/bevel-operator-fabric/docs/user-guide/network-config-kubernetes"},"next":{"title":"Create channel","permalink":"/bevel-operator-fabric/docs/user-guide/create-channel"}}');var a=t(4848),i=t(8453);const s={id:"hashicorp-vault",title:"HashiCorp Vault Integration"},l="HashiCorp Vault Integration with Bevel Operator",o={},c=[{value:"Why HashiCorp Vault?",id:"why-hashicorp-vault",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Workshop Overview",id:"workshop-overview",level:2},{value:"Step 1: Install HashiCorp Vault",id:"step-1-install-hashicorp-vault",level:2},{value:"Why This Step Matters",id:"why-this-step-matters",level:3},{value:"Installation Options",id:"installation-options",level:3},{value:"Option A: Using Docker (Recommended for Development)",id:"option-a-using-docker-recommended-for-development",level:4},{value:"Option B: Using Vault CLI",id:"option-b-using-vault-cli",level:4},{value:"Option C: Production Installation",id:"option-c-production-installation",level:4},{value:"Verify Vault Installation",id:"verify-vault-installation",level:3},{value:"Step 2: Configure Vault for Hyperledger Fabric",id:"step-2-configure-vault-for-hyperledger-fabric",level:2},{value:"Why This Step Matters",id:"why-this-step-matters-1",level:3},{value:"Enable PKI Secrets Engine",id:"enable-pki-secrets-engine",level:3},{value:"Generate Root Certificates",id:"generate-root-certificates",level:3},{value:"Create Certificate Roles",id:"create-certificate-roles",level:3},{value:"Verify PKI Configuration",id:"verify-pki-configuration",level:3},{value:"Step 3: Install and Configure Bevel Operator",id:"step-3-install-and-configure-bevel-operator",level:2},{value:"Why This Step Matters",id:"why-this-step-matters-2",level:3},{value:"Install Bevel Operator",id:"install-bevel-operator",level:3},{value:"Install kubectl Plugin",id:"install-kubectl-plugin",level:3},{value:"Create Vault Token Secret",id:"create-vault-token-secret",level:3},{value:"Configure Environment Variables",id:"configure-environment-variables",level:3},{value:"Step 4: Deploy Certificate Authorities",id:"step-4-deploy-certificate-authorities",level:2},{value:"Why This Step Matters",id:"why-this-step-matters-3",level:3},{value:"Deploy Fabric CA with Vault Integration",id:"deploy-fabric-ca-with-vault-integration",level:3},{value:"Verify CA Deployment",id:"verify-ca-deployment",level:3},{value:"Step 5: Deploy Peer Organization",id:"step-5-deploy-peer-organization",level:2},{value:"Why This Step Matters",id:"why-this-step-matters-4",level:3},{value:"Deploy Peer with Vault Integration",id:"deploy-peer-with-vault-integration",level:3},{value:"Verify Peer Deployment",id:"verify-peer-deployment",level:3},{value:"Step 6: Deploy Ordering Service",id:"step-6-deploy-ordering-service",level:2},{value:"Why This Step Matters",id:"why-this-step-matters-5",level:3},{value:"Configure Orderer PKI in Vault",id:"configure-orderer-pki-in-vault",level:3},{value:"Deploy Orderer Nodes",id:"deploy-orderer-nodes",level:3},{value:"Verify Orderer Deployment",id:"verify-orderer-deployment",level:3},{value:"Step 7: Create Network Identities",id:"step-7-create-network-identities",level:2},{value:"Why This Step Matters",id:"why-this-step-matters-6",level:3},{value:"Create Orderer Identities",id:"create-orderer-identities",level:3},{value:"Create Peer Organization Identity",id:"create-peer-organization-identity",level:3},{value:"Step 8: Create Channel",id:"step-8-create-channel",level:2},{value:"Why This Step Matters",id:"why-this-step-matters-7",level:3},{value:"Extract Certificates for Channel Configuration",id:"extract-certificates-for-channel-configuration",level:3},{value:"Create Main Channel",id:"create-main-channel",level:3},{value:"Join Peer to Channel",id:"join-peer-to-channel",level:3},{value:"Step 9: Deploy and Test Chaincode",id:"step-9-deploy-and-test-chaincode",level:2},{value:"Why This Step Matters",id:"why-this-step-matters-8",level:3},{value:"Create Network Configuration",id:"create-network-configuration",level:3},{value:"Prepare Chaincode Package",id:"prepare-chaincode-package",level:3},{value:"Install Chaincode",id:"install-chaincode",level:3},{value:"Deploy External Chaincode",id:"deploy-external-chaincode",level:3},{value:"Approve and Commit Chaincode",id:"approve-and-commit-chaincode",level:3},{value:"Step 10: Test the Complete Network",id:"step-10-test-the-complete-network",level:2},{value:"Why This Step Matters",id:"why-this-step-matters-9",level:3},{value:"Initialize Chaincode",id:"initialize-chaincode",level:3},{value:"Query Data",id:"query-data",level:3},{value:"Verify Vault Integration",id:"verify-vault-integration",level:3},{value:"Step 11: Monitor and Maintain",id:"step-11-monitor-and-maintain",level:2},{value:"Why This Step Matters",id:"why-this-step-matters-10",level:3},{value:"Monitor Vault Metrics",id:"monitor-vault-metrics",level:3},{value:"Certificate Renewal",id:"certificate-renewal",level:3},{value:"Backup and Recovery",id:"backup-and-recovery",level:3},{value:"Cleanup",id:"cleanup",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"Debug Commands",id:"debug-commands",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"hashicorp-vault-integration-with-bevel-operator",children:"HashiCorp Vault Integration with Bevel Operator"})}),"\n",(0,a.jsx)(n.p,{children:"This workshop provides a comprehensive, hands-on guide to integrating HashiCorp Vault with the Bevel Operator for Hyperledger Fabric. You'll learn how to securely manage certificates, private keys, and cryptographic materials using Vault's advanced secrets management capabilities."}),"\n",(0,a.jsx)(n.h2,{id:"why-hashicorp-vault",children:"Why HashiCorp Vault?"}),"\n",(0,a.jsx)(n.p,{children:"HashiCorp Vault is essential for production Hyperledger Fabric deployments because it provides:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Secure Certificate Management"}),": Centralized storage and lifecycle management of TLS certificates"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Private Key Protection"}),": Encrypted storage of sensitive cryptographic materials"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Dynamic Secrets"}),": On-demand generation of credentials with automatic rotation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Audit Trail"}),": Complete logging of all secret access for compliance"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Access Control"}),": Fine-grained policies for who can access what secrets"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"High Availability"}),": Clustered deployment for production resilience"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(n.p,{children:"Before starting this workshop, ensure you have:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A Kubernetes cluster (KinD, K3D, or production cluster)"}),"\n",(0,a.jsx)(n.li,{children:"kubectl configured and working"}),"\n",(0,a.jsx)(n.li,{children:"Helm installed"}),"\n",(0,a.jsx)(n.li,{children:"HashiCorp Vault CLI installed"}),"\n",(0,a.jsx)(n.li,{children:"Basic understanding of Hyperledger Fabric concepts"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"workshop-overview",children:"Workshop Overview"}),"\n",(0,a.jsx)(n.p,{children:"In this workshop, you will:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Set up HashiCorp Vault"})," - Initialize and configure Vault for certificate management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Configure Bevel Operator"})," - Install and configure the operator to use Vault"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Deploy Certificate Authorities"})," - Create CAs with Vault-backed certificate storage"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Deploy Network Components"})," - Create peers and orderers using Vault-managed certificates"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Create and Manage Channels"})," - Set up channels with Vault-secured identities"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Deploy Chaincode"})," - Install and instantiate chaincode with secure credential management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test the Network"})," - Verify the complete setup works end-to-end"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"step-1-install-hashicorp-vault",children:"Step 1: Install HashiCorp Vault"}),"\n",(0,a.jsx)(n.h3,{id:"why-this-step-matters",children:"Why This Step Matters"}),"\n",(0,a.jsx)(n.p,{children:"Vault serves as the foundation for all cryptographic material management in your Hyperledger Fabric network. Installing it first ensures you have a secure, centralized location for storing certificates and private keys."}),"\n",(0,a.jsx)(n.h3,{id:"installation-options",children:"Installation Options"}),"\n",(0,a.jsx)(n.h4,{id:"option-a-using-docker-recommended-for-development",children:"Option A: Using Docker (Recommended for Development)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Run HashiCorp Vault in development mode\ndocker run -d \\\n  --name vault-dev \\\n  -p 8200:8200 \\\n  -e 'VAULT_DEV_ROOT_TOKEN_ID=my-dev-root-token' \\\n  -e 'VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200' \\\n  hashicorp/vault:latest\n"})}),"\n",(0,a.jsx)(n.h4,{id:"option-b-using-vault-cli",children:"Option B: Using Vault CLI"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Start Vault server in development mode\nvault server -dev -dev-root-token-id=my-dev-root-token -dev-listen-address=0.0.0.0:8200\n"})}),"\n",(0,a.jsx)(n.h4,{id:"option-c-production-installation",children:"Option C: Production Installation"}),"\n",(0,a.jsx)(n.p,{children:"For production environments, install Vault using your preferred method:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Linux:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"\nsudo apt-get update && sudo apt-get install vault\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"macOS:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"brew tap hashicorp/tap\nbrew install hashicorp/tap/vault\n"})}),"\n",(0,a.jsx)(n.h3,{id:"verify-vault-installation",children:"Verify Vault Installation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Set environment variables\nexport VAULT_ADDR='http://localhost:8200'\nexport VAULT_TOKEN='my-dev-root-token'\n\n# Check Vault status\nvault status\n"})}),"\n",(0,a.jsx)(n.p,{children:"You should see output indicating Vault is running and unsealed."}),"\n",(0,a.jsx)(n.h2,{id:"step-2-configure-vault-for-hyperledger-fabric",children:"Step 2: Configure Vault for Hyperledger Fabric"}),"\n",(0,a.jsx)(n.h3,{id:"why-this-step-matters-1",children:"Why This Step Matters"}),"\n",(0,a.jsx)(n.p,{children:"Proper Vault configuration is crucial for managing Hyperledger Fabric's complex certificate hierarchy. This step sets up the PKI secrets engine and creates the necessary roles for different types of certificates (signing, TLS, client, admin)."}),"\n",(0,a.jsx)(n.h3,{id:"enable-pki-secrets-engine",children:"Enable PKI Secrets Engine"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Enable PKI secrets engine for certificate management\nvault secrets enable -path=pki pki\n\n# Configure PKI settings with extended TTL\nvault secrets tune -max-lease-ttl=87600h pki\n"})}),"\n",(0,a.jsx)(n.h3,{id:"generate-root-certificates",children:"Generate Root Certificates"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Generate root certificate for signing (identity certificates)\nvault write pki/root/generate/internal \\\n    common_name="Hyperledger Fabric Root Sign CA" \\\n    ttl=87600h \\\n    issuer_name="signing-ca" \\\n    key_type="ec" \\\n    key_bits=256\n\n# Generate TLS root certificate (for TLS connections)\nvault write pki/root/generate/internal \\\n    common_name="Hyperledger Fabric TLS Root CA" \\\n    ttl=87600h \\\n    issuer_name="tls-ca" \\\n    key_type="ec" \\\n    key_bits=256\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-certificate-roles",children:"Create Certificate Roles"}),"\n",(0,a.jsx)(n.p,{children:"Create roles for different types of certificates used in Hyperledger Fabric:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Signing certificate roles\nvault write pki/roles/peer-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="peer" \\\n    organization="Org1MSP" \\\n    issuer_ref="signing-ca"\n\nvault write pki/roles/orderer-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="orderer" \\\n    organization="OrdererMSP" \\\n    issuer_ref="signing-ca"\n\nvault write pki/roles/client-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="client" \\\n    organization="Org1MSP" \\\n    issuer_ref="signing-ca"\n\nvault write pki/roles/admin-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="admin" \\\n    organization="Org1MSP" \\\n    issuer_ref="signing-ca"\n\n# TLS certificate roles\nvault write pki/roles/peer-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="peer" \\\n    organization="Org1MSP"\n\nvault write pki/roles/orderer-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="orderer" \\\n    organization="OrdererMSP"\n\nvault write pki/roles/client-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="client" \\\n    organization="Org1MSP"\n\nvault write pki/roles/admin-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="admin" \\\n    organization="Org1MSP"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"verify-pki-configuration",children:"Verify PKI Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# List enabled secrets engines\nvault secrets list\n\n# List PKI roles\nvault list pki/roles\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-3-install-and-configure-bevel-operator",children:"Step 3: Install and Configure Bevel Operator"}),"\n",(0,a.jsx)(n.h3,{id:"why-this-step-matters-2",children:"Why This Step Matters"}),"\n",(0,a.jsx)(n.p,{children:"The Bevel Operator is the Kubernetes-native way to manage Hyperledger Fabric networks. Configuring it to use Vault ensures all cryptographic materials are stored securely and managed centrally."}),"\n",(0,a.jsx)(n.h3,{id:"install-bevel-operator",children:"Install Bevel Operator"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Add the Helm repository\nhelm repo add kfs https://kfsoftware.github.io/hlf-helm-charts --force-update\n\n# Install the operator\nhelm install hlf-operator --version=1.11.1 kfs/hlf-operator\n"})}),"\n",(0,a.jsx)(n.h3,{id:"install-kubectl-plugin",children:"Install kubectl Plugin"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Install Krew (kubectl plugin manager)\n# Follow instructions at: https://krew.sigs.k8s.io/docs/user-guide/setup/install/\n\n# Install the HLF plugin\nkubectl krew install hlf\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-vault-token-secret",children:"Create Vault Token Secret"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Create a Kubernetes secret with Vault token\nkubectl create secret generic vault-token \\\n    --from-literal=token=my-dev-root-token\n"})}),"\n",(0,a.jsx)(n.h3,{id:"configure-environment-variables",children:"Configure Environment Variables"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Set image versions\nexport PEER_IMAGE=hyperledger/fabric-peer\nexport PEER_VERSION=3.1.0\nexport ORDERER_IMAGE=hyperledger/fabric-orderer\nexport ORDERER_VERSION=3.1.0\nexport CA_IMAGE=hyperledger/fabric-ca\nexport CA_VERSION=1.5.15\n\n# Set Vault configuration\nexport VAULT_ADDR=\"http://192.168.0.20:8200\"  # Replace with your Vault address\nexport SC_NAME=standard  # Use 'local-path' for K3D\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-4-deploy-certificate-authorities",children:"Step 4: Deploy Certificate Authorities"}),"\n",(0,a.jsx)(n.h3,{id:"why-this-step-matters-3",children:"Why This Step Matters"}),"\n",(0,a.jsx)(n.p,{children:"Certificate Authorities (CAs) are the foundation of Hyperledger Fabric's identity management. Using Vault-backed CAs ensures that all certificates are generated, stored, and managed securely with proper audit trails."}),"\n",(0,a.jsx)(n.h3,{id:"deploy-fabric-ca-with-vault-integration",children:"Deploy Fabric CA with Vault Integration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Deploy CA for Org1\nkubectl hlf ca create \\\n    --image=$CA_IMAGE \\\n    --version=$CA_VERSION \\\n    --storage-class=$SC_NAME \\\n    --capacity=2Gi \\\n    --name=org1-ca \\\n    --hosts=ca-org1.localho.st \\\n    --istio-port=443 \\\n    --credential-store=vault \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="vault-token" \\\n    --vault-token-secret-namespace="default" \\\n    --vault-token-secret-key="token" \\\n    --vault-pki-path="pki" \\\n    --vault-role="admin-sign" \\\n    --vault-ttl="8760h"\n\n# Wait for CA to be ready\nkubectl wait --timeout=180s --for=condition=Running fabriccas.hlf.kungfusoftware.es --all\n'})}),"\n",(0,a.jsx)(n.h3,{id:"verify-ca-deployment",children:"Verify CA Deployment"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Check CA status\nkubectl get fabriccas\n\n# Test CA connectivity\nopenssl s_client -connect ca-org1.localho.st:443\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-5-deploy-peer-organization",children:"Step 5: Deploy Peer Organization"}),"\n",(0,a.jsx)(n.h3,{id:"why-this-step-matters-4",children:"Why This Step Matters"}),"\n",(0,a.jsx)(n.p,{children:"Peers are the core components that maintain the ledger and execute chaincode. Deploying them with Vault-managed certificates ensures secure communication and proper identity management."}),"\n",(0,a.jsx)(n.h3,{id:"deploy-peer-with-vault-integration",children:"Deploy Peer with Vault Integration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Deploy peer for Org1\nkubectl hlf peer create \\\n    --statedb=leveldb \\\n    --image=$PEER_IMAGE \\\n    --version=$PEER_VERSION \\\n    --storage-class=$SC_NAME \\\n    --enroll-id=peer \\\n    --mspid=Org1MSP \\\n    --enroll-pw=peerpw \\\n    --capacity=5Gi \\\n    --name=org1-peer0 \\\n    --hosts=peer0-org1.localho.st \\\n    --istio-port=443 \\\n    --credential-store=vault \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="vault-token" \\\n    --vault-token-secret-namespace="default" \\\n    --vault-token-secret-key="token" \\\n    --vault-pki-path="pki" \\\n    --vault-role="peer-sign" \\\n    --vault-ttl="8760h" \\\n    --tls-vault-address="$VAULT_ADDR" \\\n    --tls-vault-token-secret="vault-token" \\\n    --tls-vault-token-secret-namespace="default" \\\n    --tls-vault-token-secret-key="token" \\\n    --tls-vault-pki-path="pki" \\\n    --tls-vault-role="peer-tls" \\\n    --tls-vault-ttl="8760h"\n\n# Wait for peer to be ready\nkubectl wait --timeout=180s --for=condition=Running fabricpeers.hlf.kungfusoftware.es --all\n'})}),"\n",(0,a.jsx)(n.h3,{id:"verify-peer-deployment",children:"Verify Peer Deployment"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Check peer status\nkubectl get fabricpeers\n\n# Test peer connectivity\nopenssl s_client -connect peer0-org1.localho.st:443\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-6-deploy-ordering-service",children:"Step 6: Deploy Ordering Service"}),"\n",(0,a.jsx)(n.h3,{id:"why-this-step-matters-5",children:"Why This Step Matters"}),"\n",(0,a.jsx)(n.p,{children:"The ordering service ensures transaction ordering and consensus across the network. Using Vault for orderer certificates maintains the security chain and provides centralized certificate management."}),"\n",(0,a.jsx)(n.h3,{id:"configure-orderer-pki-in-vault",children:"Configure Orderer PKI in Vault"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Enable separate PKI for orderer organization\nvault secrets enable -path=pki_orderer pki\nvault secrets tune -max-lease-ttl=87600h pki_orderer\n\n# Generate orderer root certificates\nvault write pki_orderer/root/generate/internal \\\n    common_name="OrdererMSP Signing Root CA" \\\n    ttl=87600h \\\n    issuer_name="signing-ca" \\\n    key_type="ec" \\\n    key_bits=256\n\nvault write pki_orderer/root/generate/internal \\\n    common_name="OrdererMSP TLS Root CA" \\\n    ttl=87600h \\\n    issuer_name="tls-ca" \\\n    key_type="ec" \\\n    key_bits=256\n\n# Create orderer certificate roles\nvault write pki_orderer/roles/orderer-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="orderer" \\\n    organization="OrdererMSP" \\\n    issuer_ref="signing-ca"\n\nvault write pki_orderer/roles/orderer-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="orderer" \\\n    organization="OrdererMSP"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"deploy-orderer-nodes",children:"Deploy Orderer Nodes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Deploy multiple orderer nodes for high availability\nfor i in {0..3}; do\n    kubectl hlf ordnode create \\\n        --credential-store=vault \\\n        --image=$ORDERER_IMAGE \\\n        --version=$ORDERER_VERSION \\\n        --storage-class=$SC_NAME \\\n        --enroll-id=orderer \\\n        --mspid=OrdererMSP \\\n        --enroll-pw=ordererpw \\\n        --capacity=2Gi \\\n        --name=ord-node$((i+1)) \\\n        --hosts=orderer${i}-ord.localho.st \\\n        --admin-hosts=admin-orderer${i}-ord.localho.st \\\n        --istio-port=443 \\\n        --vault-address="$VAULT_ADDR" \\\n        --vault-token-secret="vault-token" \\\n        --vault-token-secret-namespace="default" \\\n        --vault-token-secret-key="token" \\\n        --vault-pki-path="pki_orderer" \\\n        --vault-role="orderer-sign" \\\n        --vault-ttl="8760h" \\\n        --tls-vault-address="$VAULT_ADDR" \\\n        --tls-vault-token-secret="vault-token" \\\n        --tls-vault-token-secret-namespace="default" \\\n        --tls-vault-token-secret-key="token" \\\n        --tls-vault-pki-path="pki_orderer" \\\n        --tls-vault-role="orderer-tls" \\\n        --tls-vault-ttl="8760h"\ndone\n\n# Wait for orderers to be ready\nkubectl wait --timeout=180s --for=condition=Running fabricorderernodes.hlf.kungfusoftware.es --all\n'})}),"\n",(0,a.jsx)(n.h3,{id:"verify-orderer-deployment",children:"Verify Orderer Deployment"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Check orderer status\nkubectl get fabricorderernodes\n\n# Test orderer connectivity\nfor i in {0..3}; do\n    openssl s_client -connect orderer${i}-ord.localho.st:443\ndone\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-7-create-network-identities",children:"Step 7: Create Network Identities"}),"\n",(0,a.jsx)(n.h3,{id:"why-this-step-matters-6",children:"Why This Step Matters"}),"\n",(0,a.jsx)(n.p,{children:"Network identities are required for channel management and chaincode operations. Creating these identities in Vault ensures they are securely stored and can be easily managed and rotated."}),"\n",(0,a.jsx)(n.h3,{id:"create-orderer-identities",children:"Create Orderer Identities"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Create orderer signing identity\nkubectl hlf identity create --name ord-ca-sign --namespace default \\\n    --mspid OrdererMSP \\\n    --credential-store=vault \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="vault-token" \\\n    --vault-token-secret-namespace="default" \\\n    --vault-token-secret-key="token" \\\n    --vault-pki-path="pki_orderer" \\\n    --vault-role="admin-sign" \\\n    --vault-ttl="8760h"\n\n# Create orderer TLS identity\nkubectl hlf identity create --name ord-ca-tls --namespace default \\\n    --mspid OrdererMSP \\\n    --credential-store=vault \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="vault-token" \\\n    --vault-token-secret-namespace="default" \\\n    --vault-token-secret-key="token" \\\n    --vault-pki-path="pki_orderer" \\\n    --vault-role="admin-tls" \\\n    --vault-ttl="8760h"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-peer-organization-identity",children:"Create Peer Organization Identity"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Create peer admin identity\nkubectl hlf identity create --name org1-admin --namespace default \\\n    --mspid Org1MSP \\\n    --credential-store=vault \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="vault-token" \\\n    --vault-token-secret-namespace="default" \\\n    --vault-token-secret-key="token" \\\n    --vault-pki-path="pki" \\\n    --vault-role="admin-sign" \\\n    --vault-ttl="8760h"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-8-create-channel",children:"Step 8: Create Channel"}),"\n",(0,a.jsx)(n.h3,{id:"why-this-step-matters-7",children:"Why This Step Matters"}),"\n",(0,a.jsx)(n.p,{children:"Channels provide private communication between organizations in Hyperledger Fabric. Creating channels with Vault-managed identities ensures secure channel operations and proper access control."}),"\n",(0,a.jsx)(n.h3,{id:"extract-certificates-for-channel-configuration",children:"Extract Certificates for Channel Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Get peer organization certificates\nexport PEER_ORG_SIGN_CERT=$(vault read pki/issuer/signing-ca --format=json | jq -r \'.data.certificate\' | sed -e "s/^/${IDENT_8}/" )\nexport PEER_ORG_TLS_CERT=$(vault read pki/issuer/tls-ca --format=json | jq -r \'.data.certificate\' | sed -e "s/^/${IDENT_8}/" )\n\n# Get orderer organization certificates\nexport IDENT_8=$(printf "%8s" "")\nexport ORDERER_TLS_CERT=$(vault read pki_orderer/issuer/tls-ca --format=json | jq -r \'.data.certificate\' | sed -e "s/^/${IDENT_8}/" )\nexport ORDERER_SIGN_CERT=$(vault read pki_orderer/issuer/signing-ca --format=json | jq -r \'.data.certificate\' | sed -e "s/^/${IDENT_8}/" )\n\n# Get orderer node certificates\nexport ORDERER0_TLS_CERT=$(kubectl get fabricorderernodes ord-node1 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\nexport ORDERER1_TLS_CERT=$(kubectl get fabricorderernodes ord-node2 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\nexport ORDERER2_TLS_CERT=$(kubectl get fabricorderernodes ord-node3 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\nexport ORDERER3_TLS_CERT=$(kubectl get fabricorderernodes ord-node4 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-main-channel",children:"Create Main Channel"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f - <<EOF\napiVersion: hlf.kungfusoftware.es/v1alpha1\nkind: FabricMainChannel\nmetadata:\n  name: demo\nspec:\n  name: demo\n  adminOrdererOrganizations:\n    - mspID: OrdererMSP\n  adminPeerOrganizations:\n    - mspID: Org1MSP\n  channelConfig:\n    application:\n      acls: null\n      capabilities:\n        - V2_0\n        - V2_5\n      policies: null\n    capabilities:\n      - V2_0\n    orderer:\n      batchSize:\n        absoluteMaxBytes: 1048576\n        maxMessageCount: 10\n        preferredMaxBytes: 524288\n      batchTimeout: 2s\n      capabilities:\n        - V2_0\n      etcdRaft:\n        options:\n          electionTick: 10\n          heartbeatTick: 1\n          maxInflightBlocks: 5\n          snapshotIntervalSize: 16777216\n          tickInterval: 500ms\n      ordererType: etcdraft\n      policies: null\n      state: STATE_NORMAL\n    policies: null\n  externalOrdererOrganizations: []\n  externalPeerOrganizations: []\n  peerOrganizations:\n    - mspID: Org1MSP\n      signCACert: |\n${PEER_ORG_SIGN_CERT}\n      tlsCACert: |\n${PEER_ORG_TLS_CERT}\n  identities:\n    OrdererMSP-tls:\n      secretKey: user.yaml\n      secretName: ord-ca-tls\n      secretNamespace: default\n    OrdererMSP-sign:\n      secretKey: user.yaml\n      secretName: ord-ca-sign\n      secretNamespace: default\n    Org1MSP:\n      secretKey: user.yaml\n      secretName: org1-admin\n      secretNamespace: default\n  ordererOrganizations:\n    - externalOrderersToJoin:\n        - host: ord-node1.default\n          port: 7053\n        - host: ord-node2.default\n          port: 7053\n        - host: ord-node3.default\n          port: 7053\n        - host: ord-node4.default\n          port: 7053\n      tlsCACert: |\n${ORDERER_TLS_CERT}\n      signCACert: |\n${ORDERER_SIGN_CERT}\n      mspID: OrdererMSP\n      ordererEndpoints:\n        - orderer0-ord.localho.st:443\n        - orderer1-ord.localho.st:443\n        - orderer2-ord.localho.st:443\n        - orderer3-ord.localho.st:443\n      orderersToJoin: []\n  orderers:\n    - host: orderer0-ord.localho.st\n      port: 443\n      tlsCert: |-\n${ORDERER0_TLS_CERT}\n    - host: orderer1-ord.localho.st\n      port: 443\n      tlsCert: |-\n${ORDERER1_TLS_CERT}\n    - host: orderer2-ord.localho.st\n      port: 443\n      tlsCert: |-\n${ORDERER2_TLS_CERT}\n    - host: orderer3-ord.localho.st\n      port: 443\n      tlsCert: |-\n${ORDERER3_TLS_CERT}\nEOF\n"})}),"\n",(0,a.jsx)(n.h3,{id:"join-peer-to-channel",children:"Join Peer to Channel"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f - <<EOF\napiVersion: hlf.kungfusoftware.es/v1alpha1\nkind: FabricFollowerChannel\nmetadata:\n  name: demo-org1msp\nspec:\n  anchorPeers:\n    - host: peer0-org1.localho.st\n      port: 443\n  hlfIdentity:\n    secretKey: user.yaml\n    secretName: org1-admin\n    secretNamespace: default\n  mspId: Org1MSP\n  name: demo\n  externalPeersToJoin: []\n  orderers:\n    - certificate: |\n${ORDERER0_TLS_CERT}\n      url: grpcs://orderer0-ord.localho.st:443\n  peersToJoin:\n    - name: org1-peer0\n      namespace: default\nEOF\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-9-deploy-and-test-chaincode",children:"Step 9: Deploy and Test Chaincode"}),"\n",(0,a.jsx)(n.h3,{id:"why-this-step-matters-8",children:"Why This Step Matters"}),"\n",(0,a.jsx)(n.p,{children:"Chaincode is the business logic that runs on the blockchain. Deploying it with Vault-managed credentials ensures secure chaincode operations and proper access control."}),"\n",(0,a.jsx)(n.h3,{id:"create-network-configuration",children:"Create Network Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Create network config for chaincode operations\nkubectl hlf networkconfig create --name=org1-cp \\\n  -o Org1MSP -o OrdererMSP -c demo \\\n  --identities=org1-admin.default --secret=org1-cp\n\n# Extract configuration\nkubectl get secret org1-cp -o jsonpath="{.data.config\\.yaml}" | base64 --decode > org1.yaml\n'})}),"\n",(0,a.jsx)(n.h3,{id:"prepare-chaincode-package",children:"Prepare Chaincode Package"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Set chaincode parameters\nexport CHAINCODE_NAME=asset\nexport CHAINCODE_LABEL=asset\n\n# Create metadata\ncat << EOF > "metadata.json"\n{\n    "type": "ccaas",\n    "label": "${CHAINCODE_LABEL}"\n}\nEOF\n\n# Create connection configuration\ncat > "connection.json" << EOF\n{\n  "address": "${CHAINCODE_NAME}:7052",\n  "dial_timeout": "10s",\n  "tls_required": false\n}\nEOF\n\n# Package chaincode\ntar cfz code.tar.gz connection.json\ntar cfz chaincode.tgz metadata.json code.tar.gz\n\n# Calculate package ID\nexport PACKAGE_ID=$(kubectl hlf chaincode calculatepackageid --path=chaincode.tgz --language=node --label=$CHAINCODE_LABEL)\necho "PACKAGE_ID=$PACKAGE_ID"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"install-chaincode",children:"Install Chaincode"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Install chaincode on peer\nkubectl hlf chaincode install --path=./chaincode.tgz \\\n    --config=org1.yaml --language=golang --label=$CHAINCODE_LABEL \\\n    --user=org1-admin-default --peer=org1-peer0.default\n\n# Verify installation\nkubectl hlf chaincode queryinstalled --config=org1.yaml \\\n    --user=org1-admin-default --peer=org1-peer0.default\n"})}),"\n",(0,a.jsx)(n.h3,{id:"deploy-external-chaincode",children:"Deploy External Chaincode"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Deploy chaincode container\nkubectl hlf externalchaincode sync --image=kfsoftware/chaincode-external:latest \\\n    --name=$CHAINCODE_NAME \\\n    --namespace=default \\\n    --package-id=$PACKAGE_ID \\\n    --tls-required=false \\\n    --replicas=1\n"})}),"\n",(0,a.jsx)(n.h3,{id:"approve-and-commit-chaincode",children:"Approve and Commit Chaincode"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Approve chaincode for organization\nexport SEQUENCE=1\nexport VERSION="1.0"\nkubectl hlf chaincode approveformyorg --config=org1.yaml \\\n    --user=org1-admin-default --peer=org1-peer0.default \\\n    --package-id=$PACKAGE_ID \\\n    --version "$VERSION" --sequence "$SEQUENCE" --name=asset \\\n    --policy="OR(\'Org1MSP.member\')" --channel=demo\n\n# Commit chaincode to channel\nkubectl hlf chaincode commit --config=org1.yaml \\\n    --user=org1-admin-default --mspid=Org1MSP \\\n    --version "$VERSION" --sequence "$SEQUENCE" --name=asset \\\n    --policy="OR(\'Org1MSP.member\')" --channel=demo\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-10-test-the-complete-network",children:"Step 10: Test the Complete Network"}),"\n",(0,a.jsx)(n.h3,{id:"why-this-step-matters-9",children:"Why This Step Matters"}),"\n",(0,a.jsx)(n.p,{children:"Testing the complete network ensures that all components work together correctly and that Vault integration is functioning properly across the entire system."}),"\n",(0,a.jsx)(n.h3,{id:"initialize-chaincode",children:"Initialize Chaincode"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Initialize the ledger\nkubectl hlf chaincode invoke --config=org1.yaml \\\n    --user=org1-admin-default --peer=org1-peer0.default \\\n    --chaincode=asset --channel=demo \\\n    --fcn=initLedger -a '[]'\n"})}),"\n",(0,a.jsx)(n.h3,{id:"query-data",children:"Query Data"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Query all assets\nkubectl hlf chaincode query --config=org1.yaml \\\n    --user=org1-admin-default --peer=org1-peer0.default \\\n    --chaincode=asset --channel=demo \\\n    --fcn=GetAllAssets -a '[]'\n"})}),"\n",(0,a.jsx)(n.h3,{id:"verify-vault-integration",children:"Verify Vault Integration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Check Vault audit logs\nvault audit list\n\n# List certificates in Vault\nvault list pki/roles\n\n# Check certificate issuance\nvault read pki/issuer/signing-ca\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-11-monitor-and-maintain",children:"Step 11: Monitor and Maintain"}),"\n",(0,a.jsx)(n.h3,{id:"why-this-step-matters-10",children:"Why This Step Matters"}),"\n",(0,a.jsx)(n.p,{children:"Ongoing monitoring and maintenance ensure the network remains secure and operational. Vault provides tools for certificate lifecycle management and audit compliance."}),"\n",(0,a.jsx)(n.h3,{id:"monitor-vault-metrics",children:"Monitor Vault Metrics"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Check Vault status\nvault status\n\n# Monitor secret access\nvault audit list\n\n# Check certificate expiration\nvault read pki/issuer/signing-ca\n"})}),"\n",(0,a.jsx)(n.h3,{id:"certificate-renewal",children:"Certificate Renewal"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Vault automatically manages certificate renewal based on TTL\n# Check certificate TTL\nvault read pki/issuer/signing-ca --format=json | jq '.data.ttl'\n"})}),"\n",(0,a.jsx)(n.h3,{id:"backup-and-recovery",children:"Backup and Recovery"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Backup Vault data (for production)\nvault operator raft snapshot save backup.snap\n\n# List backup snapshots\nvault operator raft snapshot list\n"})}),"\n",(0,a.jsx)(n.h2,{id:"cleanup",children:"Cleanup"}),"\n",(0,a.jsx)(n.p,{children:"When you're done testing, clean up the environment:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Delete all Fabric resources\nkubectl delete fabricorderernodes.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabricpeers.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabriccas.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabricchaincode.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabricmainchannels --all-namespaces --all\nkubectl delete fabricfollowerchannels --all-namespaces --all\n\n# Stop Vault (if using Docker)\ndocker stop vault-dev\ndocker rm vault-dev\n"})}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(n.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Vault Connection Issues"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Verify ",(0,a.jsx)(n.code,{children:"VAULT_ADDR"})," is accessible from Kubernetes cluster"]}),"\n",(0,a.jsx)(n.li,{children:"Check Vault token is valid and has proper permissions"}),"\n",(0,a.jsx)(n.li,{children:"Ensure Vault is unsealed and running"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Certificate Generation Failures"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Verify PKI secrets engine is properly configured"}),"\n",(0,a.jsx)(n.li,{children:"Check certificate roles have correct permissions"}),"\n",(0,a.jsx)(n.li,{children:"Ensure proper TTL settings"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Kubernetes Authentication Issues"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Verify service account configuration"}),"\n",(0,a.jsx)(n.li,{children:"Check Vault Kubernetes auth method setup"}),"\n",(0,a.jsx)(n.li,{children:"Ensure proper policy assignments"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"debug-commands",children:"Debug Commands"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Check Vault status\nvault status\n\n# List secrets engines\nvault secrets list\n\n# Check authentication methods\nvault auth list\n\n# View audit logs\nvault audit list\n\n# Check Kubernetes resources\nkubectl get all -l app.kubernetes.io/name=hlf-operator\n"})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(n.p,{children:"Congratulations! You've successfully deployed a Hyperledger Fabric network with HashiCorp Vault integration. Here are some next steps to consider:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Production Hardening"}),": Configure Vault clustering, auto-unseal, and high availability"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Multi-Organization Setup"}),": Add additional peer organizations with their own Vault PKI paths"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Advanced Security"}),": Implement Vault policies, response wrapping, and time-based access"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Monitoring"}),": Set up comprehensive monitoring and alerting for both Fabric and Vault"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Backup Strategy"}),": Implement automated backup and disaster recovery procedures"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.vaultproject.io/docs",children:"HashiCorp Vault Documentation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.vaultproject.io/docs/platform/k8s",children:"Vault Kubernetes Integration"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/bevel-operator-fabric/docs/operator-guide/configuration",children:"Bevel Operator Documentation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://hyperledger-fabric.readthedocs.io/",children:"Hyperledger Fabric Documentation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://discord.com/invite/hyperledger",children:"Hyperledger Discord Community"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(6540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);