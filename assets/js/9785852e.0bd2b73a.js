"use strict";(self.webpackChunkwebsite_docs=self.webpackChunkwebsite_docs||[]).push([[6124],{533:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=r(4848),t=r(8453);const o={id:"getting-started-3-0",title:"Getting started with Hyperledger Fabric 3.0"},s="Hyperledger Fabric 3.0",l={id:"intro/getting-started-3-0",title:"Getting started with Hyperledger Fabric 3.0",description:"This workshop is divided in this steps:",source:"@site/docs/intro/getting-started-3-0.md",sourceDirName:"intro",slug:"/intro/getting-started-3-0",permalink:"/bevel-operator-fabric/docs/intro/getting-started-3-0",draft:!1,unlisted:!1,editUrl:"https://github.com/hyperledger-bevel/bevel-operator-fabric/edit/master/website/docs/intro/getting-started-3-0.md",tags:[],version:"current",frontMatter:{id:"getting-started-3-0",title:"Getting started with Hyperledger Fabric 3.0"},sidebar:"mainSidebar",previous:{title:"Getting started",permalink:"/bevel-operator-fabric/docs/intro/getting-started"},next:{title:"LevelDB / CouchDB",permalink:"/bevel-operator-fabric/docs/operator-guide/state-db"}},i={},c=[{value:"1. Create kubernetes cluster",id:"1-create-kubernetes-cluster",level:2},{value:"Using K3D",id:"using-k3d",level:3},{value:"Using KinD",id:"using-kind",level:3},{value:"2. Install and configure Istio",id:"2-install-and-configure-istio",level:2},{value:"Configure Internal DNS",id:"configure-internal-dns",level:3},{value:"3. Install Hyperledger Fabric operator",id:"3-install-hyperledger-fabric-operator",level:2},{value:"Install the Kubectl plugin",id:"install-the-kubectl-plugin",level:3},{value:"4. Deploy a peer organization",id:"4-deploy-a-peer-organization",level:2},{value:"Environment Variables for AMD and ARM",id:"environment-variables-for-amd-and-arm",level:3},{value:"Deploy a certificate authority",id:"deploy-a-certificate-authority",level:3},{value:"Deploy a peer",id:"deploy-a-peer",level:3},{value:"5. Deploy an orderer organization",id:"5-deploy-an-orderer-organization",level:2},{value:"Create the certification authority",id:"create-the-certification-authority",level:3},{value:"Register user <code>orderer</code>",id:"register-user-orderer",level:3},{value:"Deploy orderer",id:"deploy-orderer",level:3},{value:"6. Create a channel",id:"6-create-a-channel",level:2},{value:"Register and enrolling OrdererMSP identity",id:"register-and-enrolling-orderermsp-identity",level:3},{value:"Register and enrolling Org1MSP identity",id:"register-and-enrolling-org1msp-identity",level:3},{value:"Create main channel",id:"create-main-channel",level:3},{value:"Create main channel using ETCDRaft",id:"create-main-channel-using-etcdraft",level:3},{value:"7. Join peer to the channel",id:"7-join-peer-to-the-channel",level:2},{value:"8. Install a chaincode",id:"8-install-a-chaincode",level:2},{value:"Prepare connection string for a peer",id:"prepare-connection-string-for-a-peer",level:3},{value:"Fetch the connection string from the Kubernetes secret",id:"fetch-the-connection-string-from-the-kubernetes-secret",level:3},{value:"Create metadata file",id:"create-metadata-file",level:3},{value:"Prepare connection file",id:"prepare-connection-file",level:3},{value:"Check if the chaincode is installed",id:"check-if-the-chaincode-is-installed",level:3},{value:"9. Deploy chaincode container on cluster",id:"9-deploy-chaincode-container-on-cluster",level:2},{value:"10. Approve chaincode",id:"10-approve-chaincode",level:2},{value:"11. Commit chaincode",id:"11-commit-chaincode",level:2},{value:"12. Invoke a transaction on the channel",id:"12-invoke-a-transaction-on-the-channel",level:2},{value:"Invoke a transaction on the channel",id:"invoke-a-transaction-on-the-channel",level:3},{value:"13. Query assets in the channel",id:"13-query-assets-in-the-channel",level:2},{value:"14. Completion",id:"14-completion",level:2},{value:"Cleanup the environment",id:"cleanup-the-environment",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"hyperledger-fabric-30",children:"Hyperledger Fabric 3.0"})}),"\n",(0,a.jsx)(n.p,{children:"This workshop is divided in this steps:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#1-create-kubernetes-cluster",children:"Create kubernetes cluster"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#2-install-and-configure-istio",children:"Install and configure Istio"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#3-install-hyperledger-fabric-operator",children:"Install Hyperledger Fabric operator"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#4-deploy-a-peer-organization",children:"Deploy a peer organization"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#5-deploy-an-orderer-organization",children:"Deploy an orderer organization"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#6-create-a-channel",children:"Create a channel"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#7-join-peer-to-the-channel",children:"Join peer to the channel"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#8-install-a-chaincode",children:"Install a chaincode"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#9-deploy-chaincode-container-on-cluster",children:"Deploy chaincode container on cluster"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#10-approve-chaincode",children:"Approve chaincode"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#11-commit-chaincode",children:"Commit chaincode"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#12-invoke-a-transaction-on-the-channel",children:"Invoke a transaction on the channel"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#13-query-assets-in-the-channel",children:"Query assets in the channel"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#14-completion",children:"Completion"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"In order to follow the workshop, you have two options, follow the Loom video or follow the steps below."}),"\n",(0,a.jsx)(n.p,{children:"Run through the steps explaining what we are going to do and how to do it."}),"\n",(0,a.jsx)(n.h2,{id:"1-create-kubernetes-cluster",children:"1. Create kubernetes cluster"}),"\n",(0,a.jsx)(n.p,{children:"To start deploying our red fabric we have to have a Kubernetes cluster. For this we will use KinD."}),"\n",(0,a.jsx)(n.p,{children:"Ensure you have these ports available before creating the cluster:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"80"}),"\n",(0,a.jsx)(n.li,{children:"443"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"If these ports are not available this tutorial will not work."}),"\n",(0,a.jsx)(n.h3,{id:"using-k3d",children:"Using K3D"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'k3d cluster create  -p "80:30949@agent:0" -p "443:30950@agent:0" --agents 2 k8s-hlf\n'})}),"\n",(0,a.jsx)(n.h3,{id:"using-kind",children:"Using KinD"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cat << EOF > kind-config.yaml\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  image: kindest/node:v1.27.3\n  extraPortMappings:\n  - containerPort: 30949\n    hostPort: 80\n  - containerPort: 30950\n    hostPort: 443\nEOF\n\nkind create cluster --config=./kind-config.yaml\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"2-install-and-configure-istio",children:"2. Install and configure Istio"}),"\n",(0,a.jsx)(n.p,{children:"Install Istio binaries on the machine:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# add TARGET_ARCH=x86_64 if you are using arm64\ncurl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.20.0 sh -\nexport PATH="$PATH:$PWD/istio-1.20.0/bin"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Install Istio on the Kubernetes cluster:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"\nkubectl create namespace istio-system\n\nistioctl operator init\n\nkubectl apply -f - <<EOF\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nmetadata:\n  name: istio-gateway\n  namespace: istio-system\nspec:\n  addonComponents:\n    grafana:\n      enabled: false\n    kiali:\n      enabled: false\n    prometheus:\n      enabled: false\n    tracing:\n      enabled: false\n  components:\n    ingressGateways:\n      - enabled: true\n        k8s:\n          hpaSpec:\n            minReplicas: 2\n          resources:\n            limits:\n              cpu: 500m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 128Mi\n          service:\n            ports:\n              - name: http\n                port: 80\n                targetPort: 8080\n                nodePort: 30949\n              - name: https\n                port: 443\n                targetPort: 8443\n                nodePort: 30950\n            type: NodePort\n        name: istio-ingressgateway\n    pilot:\n      enabled: true\n      k8s:\n        hpaSpec:\n          minReplicas: 1\n        resources:\n          limits:\n            cpu: 300m\n            memory: 512Mi\n          requests:\n            cpu: 100m\n            memory: 128Mi\n  meshConfig:\n    accessLogFile: /dev/stdout\n    enableTracing: false\n    outboundTrafficPolicy:\n      mode: ALLOW_ANY\n  profile: default\n\nEOF\n"})}),"\n",(0,a.jsx)(n.h3,{id:"configure-internal-dns",children:"Configure Internal DNS"}),"\n",(0,a.jsx)(n.p,{children:"This needs to be applied every time you restart the machine."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f - <<EOF\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: coredns\n  namespace: kube-system\ndata:\n  Corefile: |\n    .:53 {\n        errors\n        health {\n           lameduck 5s\n        }\n        rewrite name regex (.*)\\.localho\\.st istio-ingressgateway.istio-system.svc.cluster.local\n        hosts {\n          fallthrough\n        }\n        ready\n        kubernetes cluster.local in-addr.arpa ip6.arpa {\n           pods insecure\n           fallthrough in-addr.arpa ip6.arpa\n           ttl 30\n        }\n        prometheus :9153\n        forward . /etc/resolv.conf {\n           max_concurrent 1000\n        }\n        cache 30\n        loop\n        reload\n        loadbalance\n    }\nEOF\n"})}),"\n",(0,a.jsx)(n.h2,{id:"3-install-hyperledger-fabric-operator",children:"3. Install Hyperledger Fabric operator"}),"\n",(0,a.jsx)(n.p,{children:"In this step we are going to install the kubernetes operator for Fabric, this will install:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"CRD (Custom Resource Definitions) to deploy Certification Fabric Peers, Orderers and Authorities"}),"\n",(0,a.jsx)(n.li,{children:"Deploy the program to deploy the nodes in Kubernetes"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["To install helm: ",(0,a.jsx)(n.a,{href:"https://helm.sh/docs/intro/install/",children:"https://helm.sh/docs/intro/install/"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"helm repo add kfs https://kfsoftware.github.io/hlf-helm-charts --force-update\n\nhelm upgrade --install hlf-operator --version=1.11.0-beta3 -- kfs/hlf-operator\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"install-the-kubectl-plugin",children:"Install the Kubectl plugin"}),"\n",(0,a.jsxs)(n.p,{children:["To install the kubectl plugin, you must first install Krew:\n",(0,a.jsx)(n.a,{href:"https://krew.sigs.k8s.io/docs/user-guide/setup/install/",children:"https://krew.sigs.k8s.io/docs/user-guide/setup/install/"})]}),"\n",(0,a.jsx)(n.p,{children:"Afterwards, the plugin can be installed with the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl krew install hlf\n"})}),"\n",(0,a.jsx)(n.h2,{id:"4-deploy-a-peer-organization",children:"4. Deploy a peer organization"}),"\n",(0,a.jsx)(n.h3,{id:"environment-variables-for-amd-and-arm",children:"Environment Variables for AMD and ARM"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"export PEER_IMAGE=hyperledger/fabric-peer\nexport PEER_VERSION=3.0.0\n\nexport ORDERER_IMAGE=hyperledger/fabric-orderer\nexport ORDERER_VERSION=3.0.0\n\nexport CA_IMAGE=hyperledger/fabric-ca\nexport CA_VERSION=1.5.13\n"})}),"\n",(0,a.jsx)(n.h3,{id:"deploy-a-certificate-authority",children:"Deploy a certificate authority"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'export STORAGE_CLASS=local-path # k3d storage class, "standard" for KinD\nkubectl hlf ca create  --image=$CA_IMAGE --version=$CA_VERSION --storage-class=$STORAGE_CLASS --capacity=1Gi --name=org1-ca \\\n    --enroll-id=enroll --enroll-pw=enrollpw --hosts=org1-ca.localho.st --istio-port=443\n\nkubectl wait --timeout=180s --for=condition=Running fabriccas.hlf.kungfusoftware.es --all\n'})}),"\n",(0,a.jsx)(n.p,{children:"Check that the certification authority is deployed and works:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl -k https://org1-ca.localho.st:443/cainfo\n"})}),"\n",(0,a.jsx)(n.p,{children:"Register a user in the certification authority of the peer organization (Org1MSP)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# register user in CA for peers\nkubectl hlf ca register --name=org1-ca --user=peer --secret=peerpw --type=peer \\\n --enroll-id enroll --enroll-secret=enrollpw --mspid Org1MSP\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"deploy-a-peer",children:"Deploy a peer"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"\nkubectl hlf peer create --statedb=leveldb --image=$PEER_IMAGE --version=$PEER_VERSION --storage-class=$STORAGE_CLASS --enroll-id=peer --mspid=Org1MSP \\\n        --enroll-pw=peerpw --capacity=5Gi --name=org1-peer0 --ca-name=org1-ca.default \\\n        --hosts=peer0-org1.localho.st --istio-port=443\n\n\nkubectl hlf peer create --statedb=leveldb --image=$PEER_IMAGE --version=$PEER_VERSION --storage-class=$STORAGE_CLASS --enroll-id=peer --mspid=Org1MSP \\\n        --enroll-pw=peerpw --capacity=5Gi --name=org1-peer1 --ca-name=org1-ca.default \\\n        --hosts=peer1-org1.localho.st --istio-port=443\n\n\nkubectl wait --timeout=180s --for=condition=Running fabricpeers.hlf.kungfusoftware.es --all\n"})}),"\n",(0,a.jsx)(n.p,{children:"Check that the peer is deployed and works:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl s_client -connect peer0-org1.localho.st:443\nopenssl s_client -connect peer1-org1.localho.st:443\n"})}),"\n",(0,a.jsx)(n.h2,{id:"5-deploy-an-orderer-organization",children:"5. Deploy an orderer organization"}),"\n",(0,a.jsxs)(n.p,{children:["To deploy an ",(0,a.jsx)(n.code,{children:"Orderer"})," organization we have to:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Create a certification authority"}),"\n",(0,a.jsxs)(n.li,{children:["Register user ",(0,a.jsx)(n.code,{children:"orderer"})," with password ",(0,a.jsx)(n.code,{children:"ordererpw"})]}),"\n",(0,a.jsx)(n.li,{children:"Create orderer"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"create-the-certification-authority",children:"Create the certification authority"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"\nkubectl hlf ca create  --image=$CA_IMAGE --version=$CA_VERSION --storage-class=$STORAGE_CLASS --capacity=1Gi --name=ord-ca \\\n    --enroll-id=enroll --enroll-pw=enrollpw --hosts=ord-ca.localho.st --istio-port=443\n\nkubectl wait --timeout=180s --for=condition=Running fabriccas.hlf.kungfusoftware.es --all\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Check that the certification authority is deployed and works:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl -vik https://ord-ca.localho.st:443/cainfo\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"register-user-orderer",children:["Register user ",(0,a.jsx)(n.code,{children:"orderer"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'kubectl hlf ca register --name=ord-ca --user=orderer --secret=ordererpw \\\n    --type=orderer --enroll-id enroll --enroll-secret=enrollpw --mspid=OrdererMSP --ca-url="https://ord-ca.localho.st:443"\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"deploy-orderer",children:"Deploy orderer"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"\nkubectl hlf ordnode create --image=$ORDERER_IMAGE --version=$ORDERER_VERSION \\\n    --storage-class=$STORAGE_CLASS --enroll-id=orderer --mspid=OrdererMSP \\\n    --enroll-pw=ordererpw --capacity=2Gi --name=ord-node1 --ca-name=ord-ca.default \\\n    --hosts=orderer0-ord.localho.st --admin-hosts=admin-orderer0-ord.localho.st --istio-port=443\n\n\nkubectl hlf ordnode create --image=$ORDERER_IMAGE --version=$ORDERER_VERSION \\\n    --storage-class=$STORAGE_CLASS --enroll-id=orderer --mspid=OrdererMSP \\\n    --enroll-pw=ordererpw --capacity=2Gi --name=ord-node2 --ca-name=ord-ca.default \\\n    --hosts=orderer1-ord.localho.st --admin-hosts=admin-orderer1-ord.localho.st --istio-port=443\n\nkubectl hlf ordnode create --image=$ORDERER_IMAGE --version=$ORDERER_VERSION \\\n    --storage-class=$STORAGE_CLASS --enroll-id=orderer --mspid=OrdererMSP \\\n    --enroll-pw=ordererpw --capacity=2Gi --name=ord-node3 --ca-name=ord-ca.default \\\n    --hosts=orderer2-ord.localho.st --admin-hosts=admin-orderer2-ord.localho.st --istio-port=443\n\n\nkubectl hlf ordnode create --image=$ORDERER_IMAGE --version=$ORDERER_VERSION \\\n    --storage-class=$STORAGE_CLASS --enroll-id=orderer --mspid=OrdererMSP \\\n    --enroll-pw=ordererpw --capacity=2Gi --name=ord-node4 --ca-name=ord-ca.default \\\n    --hosts=orderer3-ord.localho.st --admin-hosts=admin-orderer3-ord.localho.st --istio-port=443\n\n# 3/4\n\nkubectl wait --timeout=180s --for=condition=Running fabricorderernodes.hlf.kungfusoftware.es --all\n"})}),"\n",(0,a.jsx)(n.p,{children:"Check that the orderer is running:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl get pods\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl s_client -connect orderer0-ord.localho.st:443\n"})}),"\n",(0,a.jsx)(n.h2,{id:"6-create-a-channel",children:"6. Create a channel"}),"\n",(0,a.jsx)(n.p,{children:"To create the channel we need to first create the wallet secret, which will contain the identities used by the operator to manage the channel"}),"\n",(0,a.jsx)(n.h3,{id:"register-and-enrolling-orderermsp-identity",children:"Register and enrolling OrdererMSP identity"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# register\nkubectl hlf ca register --name=ord-ca --user=admin --secret=adminpw \\\n    --type=admin --enroll-id enroll --enroll-secret=enrollpw --mspid=OrdererMSP\n\n\nkubectl hlf identity create --name orderer-admin-sign --namespace default \\\n    --ca-name ord-ca --ca-namespace default \\\n    --ca ca --mspid OrdererMSP --enroll-id admin --enroll-secret adminpw # sign identity\n\nkubectl hlf identity create --name orderer-admin-tls --namespace default \\\n    --ca-name ord-ca --ca-namespace default \\\n    --ca tlsca --mspid OrdererMSP --enroll-id admin --enroll-secret adminpw # tls identity\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"register-and-enrolling-org1msp-identity",children:"Register and enrolling Org1MSP identity"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# register\nkubectl hlf ca register --name=org1-ca --namespace=default --user=admin --secret=adminpw \\\n    --type=admin --enroll-id enroll --enroll-secret=enrollpw --mspid=Org1MSP\n\n# enroll\nkubectl hlf identity create --name org1-admin --namespace default \\\n    --ca-name org1-ca --ca-namespace default \\\n    --ca ca --mspid Org1MSP --enroll-id admin --enroll-secret adminpw\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-main-channel",children:"Create main channel"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'export IDENT_12=$(printf "%16s" "")\n# tls CA certificate\nexport ORDERER_TLS_CERT=$(kubectl get fabriccas ord-ca -o=jsonpath=\'{.status.tlsca_cert}\' | sed -e "s/^/${IDENT_12}/" )\n\nexport ORDERER0_TLS_CERT=$(kubectl get fabricorderernodes ord-node1 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_12}/" )\nexport ORDERER1_TLS_CERT=$(kubectl get fabricorderernodes ord-node2 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_12}/" )\nexport ORDERER2_TLS_CERT=$(kubectl get fabricorderernodes ord-node3 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_12}/" )\nexport ORDERER3_TLS_CERT=$(kubectl get fabricorderernodes ord-node4 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_12}/" )\n\nexport ORDERER0_SIGN_CERT=$(kubectl get fabricorderernodes ord-node1 -o=jsonpath=\'{.status.signCert}\' | sed -e "s/^/${IDENT_12}/" )\nexport ORDERER1_SIGN_CERT=$(kubectl get fabricorderernodes ord-node2 -o=jsonpath=\'{.status.signCert}\' | sed -e "s/^/${IDENT_12}/" )\nexport ORDERER2_SIGN_CERT=$(kubectl get fabricorderernodes ord-node3 -o=jsonpath=\'{.status.signCert}\' | sed -e "s/^/${IDENT_12}/" )\nexport ORDERER3_SIGN_CERT=$(kubectl get fabricorderernodes ord-node4 -o=jsonpath=\'{.status.signCert}\' | sed -e "s/^/${IDENT_12}/" )\n\nkubectl apply -f - <<EOF\napiVersion: hlf.kungfusoftware.es/v1alpha1\nkind: FabricMainChannel\nmetadata:\n  name: demo\nspec:\n  name: demo\n  adminOrdererOrganizations:\n    - mspID: OrdererMSP\n  adminPeerOrganizations:\n    - mspID: Org1MSP\n  channelConfig:\n    application:\n      acls: null\n      capabilities:\n        - V2_5\n      policies: null\n    capabilities:\n      - V3_0\n    orderer:\n      batchSize:\n        absoluteMaxBytes: 1048576\n        maxMessageCount: 100\n        preferredMaxBytes: 524288\n      batchTimeout: 2s\n      capabilities:\n        - V2_0\n      smartBFT:\n        request_batch_max_count: 100\n        request_batch_max_bytes: 10485760\n        request_batch_max_interval: "50ms"\n        incoming_message_buffer_size: 200\n        request_pool_size: 100000\n        request_forward_timeout: "2s"\n        request_complain_timeout: "20s"\n        request_auto_remove_timeout: "3m"\n        view_change_resend_interval: "5s"\n        view_change_timeout: "20s"\n        leader_heartbeat_timeout: "1m0s"\n        leader_heartbeat_count: 10\n        collect_timeout: "1s"\n        sync_on_start: true\n        speed_up_view_change: false\n        leader_rotation: 0 # unspecified\n        decisions_per_leader: 3\n        request_max_bytes: 0\n\n      consenterMapping:\n      - host: orderer0-ord.localho.st\n        port: 443\n        id: 1\n        msp_id: OrdererMSP\n        client_tls_cert: |\n${ORDERER0_TLS_CERT}\n\n        server_tls_cert: |\n${ORDERER0_TLS_CERT}\n\n        identity: |\n${ORDERER0_SIGN_CERT}\n\n      - host: orderer1-ord.localho.st\n        port: 443\n        id: 2\n        msp_id: OrdererMSP\n        client_tls_cert: |\n${ORDERER1_TLS_CERT}\n\n        server_tls_cert: |\n${ORDERER1_TLS_CERT}\n\n        identity: |\n${ORDERER1_SIGN_CERT}\n\n      - host: orderer2-ord.localho.st\n        port: 443\n        id: 3\n        msp_id: OrdererMSP\n        client_tls_cert: |\n${ORDERER2_TLS_CERT}\n\n        server_tls_cert: |\n${ORDERER2_TLS_CERT}\n\n        identity: |\n${ORDERER2_SIGN_CERT}\n\n      - host: orderer3-ord.localho.st\n        port: 443\n        id: 4\n        msp_id: OrdererMSP\n        client_tls_cert: |\n${ORDERER3_TLS_CERT}\n\n        server_tls_cert: |\n${ORDERER3_TLS_CERT}\n\n        identity: |\n${ORDERER3_SIGN_CERT}\n\n      ordererType: BFT\n      policies: null\n      state: STATE_NORMAL\n    policies: null\n  externalOrdererOrganizations: []\n  peerOrganizations:\n    - mspID: Org1MSP\n      caName: "org1-ca"\n      caNamespace: "default"\n  identities:\n    OrdererMSP:\n      secretKey: user.yaml\n      secretName: orderer-admin-tls\n      secretNamespace: default\n    OrdererMSP-sign:\n      secretKey: user.yaml\n      secretName: orderer-admin-sign\n      secretNamespace: default\n    Org1MSP:\n      secretKey: user.yaml\n      secretName: org1-admin\n      secretNamespace: default\n  externalPeerOrganizations: []\n  ordererOrganizations:\n    - caName: "ord-ca"\n      caNamespace: "default"\n      externalOrderersToJoin:\n        - host: ord-node1\n          port: 7053\n        - host: ord-node2\n          port: 7053\n        - host: ord-node3\n          port: 7053\n        - host: ord-node4\n          port: 7053\n      mspID: OrdererMSP\n      ordererEndpoints:\n        - orderer0-ord.localho.st:443\n        - orderer1-ord.localho.st:443\n        - orderer2-ord.localho.st:443\n        - orderer3-ord.localho.st:443\n      orderersToJoin: []\n  orderers:\n    - host: ord-node1\n      port: 7050\n      tlsCert: |\n${ORDERER0_TLS_CERT}\n    - host: ord-node2\n      port: 7050\n      tlsCert: |-\n${ORDERER1_TLS_CERT}\n    - host: ord-node3\n      port: 7050\n      tlsCert: |-\n${ORDERER2_TLS_CERT}\n    - host: ord-node4\n      port: 7050\n      tlsCert: |-\n${ORDERER2_TLS_CERT}\n\nEOF\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-main-channel-using-etcdraft",children:"Create main channel using ETCDRaft"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'export PEER_ORG_SIGN_CERT=$(kubectl get fabriccas org1-ca -o=jsonpath=\'{.status.ca_cert}\')\nexport PEER_ORG_TLS_CERT=$(kubectl get fabriccas org1-ca -o=jsonpath=\'{.status.tlsca_cert}\')\nexport IDENT_8=$(printf "%8s" "")\nexport ORDERER_TLS_CERT=$(kubectl get fabriccas ord-ca -o=jsonpath=\'{.status.tlsca_cert}\' | sed -e "s/^/${IDENT_8}/" )\nexport ORDERER0_TLS_CERT=$(kubectl get fabricorderernodes ord-node1 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\nexport ORDERER1_TLS_CERT=$(kubectl get fabricorderernodes ord-node2 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\nexport ORDERER2_TLS_CERT=$(kubectl get fabricorderernodes ord-node3 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\nexport ORDERER3_TLS_CERT=$(kubectl get fabricorderernodes ord-node4 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\n\nkubectl apply -f - <<EOF\napiVersion: hlf.kungfusoftware.es/v1alpha1\nkind: FabricMainChannel\nmetadata:\n  name: demoetcdraft\nspec:\n  name: demoetcdraft\n  adminOrdererOrganizations:\n    - mspID: OrdererMSP\n  adminPeerOrganizations:\n    - mspID: Org1MSP\n  channelConfig:\n    application:\n      acls: null\n      capabilities:\n        - V2_0\n      policies: null\n    capabilities:\n      - V2_0\n    orderer:\n      batchSize:\n        absoluteMaxBytes: 1048576\n        maxMessageCount: 10\n        preferredMaxBytes: 524288\n      batchTimeout: 2s\n      capabilities:\n        - V2_0\n      etcdRaft:\n        options:\n          electionTick: 10\n          heartbeatTick: 1\n          maxInflightBlocks: 5\n          snapshotIntervalSize: 16777216\n          tickInterval: 500ms\n      ordererType: etcdraft\n      policies: null\n      state: STATE_NORMAL\n    policies: null\n  externalOrdererOrganizations: []\n  peerOrganizations:\n    - mspID: Org1MSP\n      caName: "org1-ca"\n      caNamespace: "default"\n  identities:\n    OrdererMSP:\n      secretKey: user.yaml\n      secretName: orderer-admin-tls\n      secretNamespace: default\n    OrdererMSP-sign:\n      secretKey: user.yaml\n      secretName: orderer-admin-sign\n      secretNamespace: default\n    Org1MSP:\n      secretKey: user.yaml\n      secretName: org1-admin\n      secretNamespace: default\n  externalPeerOrganizations: []\n  ordererOrganizations:\n    - caName: "ord-ca"\n      caNamespace: "default"\n      externalOrderersToJoin:\n        - host: ord-node1\n          port: 7053\n        - host: ord-node2\n          port: 7053\n        - host: ord-node3\n          port: 7053\n        - host: ord-node4\n          port: 7053\n      mspID: OrdererMSP\n      ordererEndpoints:\n        - ord-node1:7050\n        - ord-node2:7050\n        - ord-node3:7050\n        - ord-node4:7050\n      orderersToJoin: []\n  orderers:\n    - host: ord-node1\n      port: 7050\n      tlsCert: |-\n${ORDERER0_TLS_CERT}\n    - host: ord-node2\n      port: 7050\n      tlsCert: |-\n${ORDERER1_TLS_CERT}\n    - host: ord-node3\n      port: 7050\n      tlsCert: |-\n${ORDERER2_TLS_CERT}\n    - host: ord-node4\n      port: 7050\n      tlsCert: |-\n${ORDERER3_TLS_CERT}\n\nEOF\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"7-join-peer-to-the-channel",children:"7. Join peer to the channel"}),"\n",(0,a.jsxs)(n.p,{children:["To join the peers from Org1MSP to the channel ",(0,a.jsx)(n.code,{children:"demo"})," we need to create a ",(0,a.jsx)(n.code,{children:"FabricFollowerChannel"})," resource:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'\nexport IDENT_8=$(printf "%8s" "")\nexport ORDERER0_TLS_CERT=$(kubectl get fabricorderernodes ord-node1 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\n\nkubectl apply -f - <<EOF\napiVersion: hlf.kungfusoftware.es/v1alpha1\nkind: FabricFollowerChannel\nmetadata:\n  name: demo-org1msp\nspec:\n  anchorPeers:\n    - host: org1-peer0.default\n      port: 7051\n    - host: org1-peer1.default\n      port: 7051\n  hlfIdentity:\n    secretKey: user.yaml\n    secretName: org1-admin\n    secretNamespace: default\n  mspId: Org1MSP\n  name: demo\n  externalPeersToJoin: []\n  orderers:\n    - certificate: |\n${ORDERER0_TLS_CERT}\n      url: grpcs://ord-node1.default:7050\n  peersToJoin:\n    - name: org1-peer0\n      namespace: default\n    - name: org1-peer1\n      namespace: default\nEOF\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"8-install-a-chaincode",children:"8. Install a chaincode"}),"\n",(0,a.jsx)(n.h3,{id:"prepare-connection-string-for-a-peer",children:"Prepare connection string for a peer"}),"\n",(0,a.jsx)(n.p,{children:"To prepare the connection string, we have to:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"FabricNetworkConfig"})," object in the Kubernetes cluster"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Fetch the connection string from the Kubernetes secret"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Get connection string without users for organization Org1MSP and OrdererMSP"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"\n# This identity will register and enroll the user\nkubectl hlf identity create --name org1-admin --namespace default \\\n    --ca-name org1-ca --ca-namespace default \\\n    --ca ca --mspid Org1MSP --enroll-id explorer-admin --enroll-secret explorer-adminpw \\\n    --ca-enroll-id=enroll --ca-enroll-secret=enrollpw --ca-type=admin\n\n\nkubectl hlf networkconfig create --name=org1-cp \\\n  -o Org1MSP -o OrdererMSP -c demo \\\n  --identities=org1-admin.default --secret=org1-cp\n"})}),"\n",(0,a.jsx)(n.h3,{id:"fetch-the-connection-string-from-the-kubernetes-secret",children:"Fetch the connection string from the Kubernetes secret"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'kubectl get secret org1-cp -o jsonpath="{.data.config\\.yaml}" | base64 --decode > org1.yaml\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-metadata-file",children:"Create metadata file"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# remove the code.tar.gz chaincode.tgz if they exist\nrm code.tar.gz chaincode.tgz\nexport CHAINCODE_NAME=asset\nexport CHAINCODE_LABEL=asset\ncat << METADATA-EOF > "metadata.json"\n{\n    "type": "ccaas",\n    "label": "${CHAINCODE_LABEL}"\n}\nMETADATA-EOF\n'})}),"\n",(0,a.jsx)(n.h3,{id:"prepare-connection-file",children:"Prepare connection file"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'## chaincode as a service\ncat > "connection.json" <<CONN_EOF\n{\n  "address": "${CHAINCODE_NAME}:7052",\n  "dial_timeout": "10s",\n  "tls_required": false\n}\nCONN_EOF\n\ntar cfz code.tar.gz connection.json\ntar cfz chaincode.tgz metadata.json code.tar.gz\nexport PACKAGE_ID=$(kubectl hlf chaincode calculatepackageid --path=chaincode.tgz --language=node --label=$CHAINCODE_LABEL)\necho "PACKAGE_ID=$PACKAGE_ID"\n\nkubectl hlf chaincode install --path=./chaincode.tgz \\\n    --config=org1.yaml --language=golang --label=$CHAINCODE_LABEL --user=org1-admin-default --peer=org1-peer0.default\n\nkubectl hlf chaincode install --path=./chaincode.tgz \\\n    --config=org1.yaml --language=golang --label=$CHAINCODE_LABEL --user=org1-admin-default --peer=org1-peer1.default\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"check-if-the-chaincode-is-installed",children:"Check if the chaincode is installed"}),"\n",(0,a.jsx)(n.p,{children:"TO check if the chaincode is installed, we can use the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl hlf chaincode queryinstalled --config=org1.yaml --user=org1-admin-default --peer=org1-peer0.default\n"})}),"\n",(0,a.jsx)(n.p,{children:"It should return something like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'PACKAGE ID                                                              LABEL   REFERENCES\nasset:f1056c50a23f901d2aa6893505eef057db548f0775003dabbfd1f500877acda8  asset   {"demo":[{"name":"asset","version":"1.0"}]}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"9-deploy-chaincode-container-on-cluster",children:"9. Deploy chaincode container on cluster"}),"\n",(0,a.jsx)(n.p,{children:"The following command will create or update the CRD based on the packageID, chaincode name, and docker image."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl hlf externalchaincode sync --image=kfsoftware/chaincode-external:latest \\\n    --name=$CHAINCODE_NAME \\\n    --namespace=default \\\n    --package-id=$PACKAGE_ID \\\n    --tls-required=false \\\n    --replicas=1\n"})}),"\n",(0,a.jsx)(n.h2,{id:"10-approve-chaincode",children:"10. Approve chaincode"}),"\n",(0,a.jsx)(n.p,{children:"To approve the chaincode definition for org1, run the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'export SEQUENCE=1\nexport VERSION="1.0"\nkubectl hlf chaincode approveformyorg --config=org1.yaml --user=org1-admin-default --peer=org1-peer0.default \\\n    --package-id=$PACKAGE_ID \\\n    --version "$VERSION" --sequence "$SEQUENCE" --name=asset \\\n    --policy="OR(\'Org1MSP.member\')" --channel=demo\n'})}),"\n",(0,a.jsx)(n.h2,{id:"11-commit-chaincode",children:"11. Commit chaincode"}),"\n",(0,a.jsx)(n.p,{children:"To commit chaincode to the channel, run the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'kubectl hlf chaincode commit --config=org1.yaml --user=org1-admin-default --mspid=Org1MSP \\\n    --version "$VERSION" --sequence "$SEQUENCE" --name=asset \\\n    --policy="OR(\'Org1MSP.member\')" --channel=demo\n'})}),"\n",(0,a.jsx)(n.h2,{id:"12-invoke-a-transaction-on-the-channel",children:"12. Invoke a transaction on the channel"}),"\n",(0,a.jsx)(n.p,{children:"Now that we have committed the chaincode to the channel, we can interact with it."}),"\n",(0,a.jsx)(n.p,{children:"We will use the kubectl plugin to interact with the chaincode. The plugin is a wrapper around the go-fabric SDK and provides a more user-friendly interface."}),"\n",(0,a.jsx)(n.h3,{id:"invoke-a-transaction-on-the-channel",children:"Invoke a transaction on the channel"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl hlf chaincode invoke --config=org1.yaml \\\n    --user=org1-admin-default --peer=org1-peer0.default \\\n    --chaincode=asset --channel=demo \\\n    --fcn=initLedger\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"13-query-assets-in-the-channel",children:"13. Query assets in the channel"}),"\n",(0,a.jsx)(n.p,{children:"To query the chaincode, run the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl hlf chaincode query --config=org1.yaml \\\n    --user=org1-admin-default --peer=org1-peer0.default \\\n    --chaincode=asset --channel=demo \\\n    --fcn=GetAllAssets -a '[]'\n"})}),"\n",(0,a.jsx)(n.h1,{id:"131-create-an-asset",children:"13.1 Create an asset"}),"\n",(0,a.jsx)(n.p,{children:"Create an asset"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'kubectl hlf chaincode invoke --config=org1.yaml \\\n    --user=org1-admin-default --peer=org1-peer0.default \\\n    --chaincode=asset --channel=demo \\\n    --fcn=CreateAsset -a "asset7" -a blue -a "5" -a "tom" -a "100"\n'})}),"\n",(0,a.jsx)(n.h1,{id:"132-query-the-asset",children:"13.2 Query the asset"}),"\n",(0,a.jsx)(n.p,{children:"Query the asset we just created"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl hlf chaincode query --config=org1.yaml \\\n    --user=org1-admin-default --peer=org1-peer0.default \\\n    --chaincode=asset --channel=demo \\\n    --fcn=ReadAsset -a asset7\n"})}),"\n",(0,a.jsx)(n.h2,{id:"14-completion",children:"14. Completion"}),"\n",(0,a.jsx)(n.p,{children:"Congratulations! You have completed the workshop."}),"\n",(0,a.jsx)(n.p,{children:"At this point, you must have:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Ordering service with 3 nodes and a CA"}),"\n",(0,a.jsx)(n.li,{children:"Peer organization with a peer and a CA"}),"\n",(0,a.jsxs)(n.li,{children:["A channel ",(0,a.jsx)(n.strong,{children:"demo"})]}),"\n",(0,a.jsx)(n.li,{children:"A chaincode install in peer0"}),"\n",(0,a.jsx)(n.li,{children:"A chaincode approved and committed"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"If something went wrong or didn't work, please, open an issue."}),"\n",(0,a.jsx)(n.h2,{id:"cleanup-the-environment",children:"Cleanup the environment"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl delete fabricorderernodes.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabricpeers.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabriccas.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabricchaincode.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabricmainchannels --all-namespaces --all\nkubectl delete fabricfollowerchannels --all-namespaces --all\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var a=r(6540);const t={},o=a.createContext(t);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);