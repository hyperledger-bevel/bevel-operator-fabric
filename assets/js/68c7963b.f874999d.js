"use strict";(self.webpackChunkwebsite_docs=self.webpackChunkwebsite_docs||[]).push([[2181],{6893:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=r(4848),i=r(8453);const o={id:"network-config",title:"Get a network config"},a=void 0,s={id:"user-guide/network-config",title:"Get a network config",description:"Generating a network config is one of the most common operations once you have a network up and running.",source:"@site/docs/user-guide/network-config.md",sourceDirName:"user-guide",slug:"/user-guide/network-config",permalink:"/bevel-operator-fabric/docs/user-guide/network-config",draft:!1,unlisted:!1,editUrl:"https://github.com/hyperledger-bevel/bevel-operator-fabric/edit/master/website/docs/user-guide/network-config.md",tags:[],version:"current",frontMatter:{id:"network-config",title:"Get a network config"},sidebar:"mainSidebar",previous:{title:"Automatic renewal of certificates",permalink:"/bevel-operator-fabric/docs/operator-guide/auto-renew-certificates"},next:{title:"Using network config in the kubernetes cluster",permalink:"/bevel-operator-fabric/docs/user-guide/network-config-kubernetes"}},l={},c=[{value:"Using CRDs",id:"using-crds",level:2},{value:"Using the CLI",id:"using-the-cli",level:2},{value:"Generate network config",id:"generate-network-config",level:3},{value:"Setup env variables",id:"setup-env-variables",level:3},{value:"Register a user",id:"register-a-user",level:3},{value:"Enroll a user",id:"enroll-a-user",level:3},{value:"Utility: add user to network config",id:"utility-add-user-to-network-config",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Generating a network config is one of the most common operations once you have a network up and running."}),"\n",(0,t.jsx)(n.h2,{id:"using-crds",children:"Using CRDs"}),"\n",(0,t.jsx)(n.p,{children:"This is the simplest way to get a network config. You can  get a network config with the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: hlf.kungfusoftware.es/v1alpha1\nkind: FabricNetworkConfig\nmetadata:\n  name: network-config\nspec:\n  # channel to include in the network config\n  channels:\n    - demo\n  # identities to include in the network config\n  identities:\n    - name: <identity_name>\n      namespace: <identity_namespace>\n  internal: false\n  # namespace for the peers and orderers to include in the network config\n  namespaces:\n    - default\n    - hlf\n  organization: ''\n  # organizations to include in the network config\n  organizations:\n    - OrdererMSP\n    - Org1MSP\n    - Org2MSP\n  # output secret name for the network config\n  secretName: network-config\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The network config controller will be watching for changes in the network config CRD and will generate a network config secret with the name specified in the ",(0,t.jsx)(n.code,{children:"secretName"})," field. The secret will contain a ",(0,t.jsx)(n.code,{children:"config.yaml"})," file with the network config. If the identities are renewed, the network config will be updated automatically."]}),"\n",(0,t.jsx)(n.h2,{id:"using-the-cli",children:"Using the CLI"}),"\n",(0,t.jsx)(n.h3,{id:"generate-network-config",children:"Generate network config"}),"\n",(0,t.jsx)(n.p,{children:"You can get a network config with the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl hlf inspect --output networkConfig.yaml -o OrdererMSP -o Org1MSP\n"})}),"\n",(0,t.jsx)(n.p,{children:"Network config will look like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'name: hlf-network\nversion: 1.0.0\nclient:\n  organization: ""\n... rest of your network config ...\n'})}),"\n",(0,t.jsx)(n.p,{children:"In order to have users in your network, first you need to register and enroll them:"}),"\n",(0,t.jsx)(n.h3,{id:"setup-env-variables",children:"Setup env variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"CA_NAME=ca-org1\nCA_NAMESPACE=default\nMSP_ID=Org1MSP\n\nUSER_NAME=admin\nUSER_PWD=adminpw\nUSER_TYPE=admin # it can be client, admin, peer, orderer\nENROLL_USER=enroll # username of the enroll user of the CA\nENROLL_PWD=enrollpw # username of the enroll password of the CA\n\nUSER_CA_TYPE=ca # it can be ca, tlsca\n"})}),"\n",(0,t.jsx)(n.h3,{id:"register-a-user",children:"Register a user"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl hlf ca register --name=$CA_NAME \\\n --namespace=$CA_NAMESPACE --mspid=$MSP_ID \\\n --user=$USER_NAME --secret=$USER_PWD --type=$USER_TYPE \\\n --enroll-id=$ENROLL_USER --enroll-secret=$ENROLL_PWD\n"})}),"\n",(0,t.jsx)(n.p,{children:"If it has been already registered, the following error will appear"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-log",children:"Error: failed to register user: failed to register user: Response from server: Error Code: 74 - Identity 'admin' is already registered\n"})}),"\n",(0,t.jsx)(n.h3,{id:"enroll-a-user",children:"Enroll a user"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl hlf ca enroll --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user=$USER_NAME --secret=$USER_PWD --mspid $MSP_ID \\\n    --ca-name=$USER_CA_TYPE  --output user.yaml\n"})}),"\n",(0,t.jsx)(n.h3,{id:"utility-add-user-to-network-config",children:"Utility: add user to network config"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl hlf inspect --output org1.yaml -o Org1MSP -o OrdererMSP\n\n## add user key and cert to org1.yaml from peer-org1.yaml\n\nkubectl hlf utils adduser --userPath=user.yaml \\\n  --config=org1.yaml --username=admin --mspid=$MSP_ID\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(6540);const i={},o=t.createContext(i);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);