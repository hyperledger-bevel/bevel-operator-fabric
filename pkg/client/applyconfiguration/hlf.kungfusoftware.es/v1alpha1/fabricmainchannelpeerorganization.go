// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// FabricMainChannelPeerOrganizationApplyConfiguration represents an declarative configuration of the FabricMainChannelPeerOrganization type for use
// with apply.
type FabricMainChannelPeerOrganizationApplyConfiguration struct {
	MSPID       *string `json:"mspID,omitempty"`
	CAName      *string `json:"caName,omitempty"`
	CANamespace *string `json:"caNamespace,omitempty"`
}

// FabricMainChannelPeerOrganizationApplyConfiguration constructs an declarative configuration of the FabricMainChannelPeerOrganization type for use with
// apply.
func FabricMainChannelPeerOrganization() *FabricMainChannelPeerOrganizationApplyConfiguration {
	return &FabricMainChannelPeerOrganizationApplyConfiguration{}
}

// WithMSPID sets the MSPID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MSPID field is set to the value of the last call.
func (b *FabricMainChannelPeerOrganizationApplyConfiguration) WithMSPID(value string) *FabricMainChannelPeerOrganizationApplyConfiguration {
	b.MSPID = &value
	return b
}

// WithCAName sets the CAName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CAName field is set to the value of the last call.
func (b *FabricMainChannelPeerOrganizationApplyConfiguration) WithCAName(value string) *FabricMainChannelPeerOrganizationApplyConfiguration {
	b.CAName = &value
	return b
}

// WithCANamespace sets the CANamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CANamespace field is set to the value of the last call.
func (b *FabricMainChannelPeerOrganizationApplyConfiguration) WithCANamespace(value string) *FabricMainChannelPeerOrganizationApplyConfiguration {
	b.CANamespace = &value
	return b
}
