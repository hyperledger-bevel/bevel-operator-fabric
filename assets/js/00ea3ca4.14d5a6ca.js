"use strict";(self.webpackChunkwebsite_docs=self.webpackChunkwebsite_docs||[]).push([[6676],{7792:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"user-guide/hashicorp-vault","title":"HashiCorp Vault Integration","description":"This workshop provides a comprehensive, hands-on guide to integrating HashiCorp Vault with the Bevel Operator for Hyperledger Fabric. You\'ll learn how to securely manage certificates, private keys, and cryptographic materials using Vault\'s advanced secrets management capabilities.","source":"@site/docs/user-guide/hashicorp-vault.md","sourceDirName":"user-guide","slug":"/user-guide/hashicorp-vault","permalink":"/bevel-operator-fabric/docs/user-guide/hashicorp-vault","draft":false,"unlisted":false,"editUrl":"https://github.com/hyperledger-bevel/bevel-operator-fabric/edit/master/website/docs/user-guide/hashicorp-vault.md","tags":[],"version":"current","frontMatter":{"id":"hashicorp-vault","title":"HashiCorp Vault Integration"},"sidebar":"mainSidebar","previous":{"title":"Using network config in the kubernetes cluster","permalink":"/bevel-operator-fabric/docs/user-guide/network-config-kubernetes"},"next":{"title":"Create channel","permalink":"/bevel-operator-fabric/docs/user-guide/create-channel"}}');var a=r(4848),l=r(8453);const s={id:"hashicorp-vault",title:"HashiCorp Vault Integration"},i="HashiCorp Vault Integration with Bevel Operator",o={},c=[{value:"Why HashiCorp Vault?",id:"why-hashicorp-vault",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Workshop Overview",id:"workshop-overview",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Create Kubernetes Cluster",id:"create-kubernetes-cluster",level:2},{value:"Using K3D",id:"using-k3d",level:3},{value:"Using KinD",id:"using-kind",level:3},{value:"Install Kubernetes operator",id:"install-kubernetes-operator",level:2},{value:"Install the Kubectl plugin",id:"install-the-kubectl-plugin",level:3},{value:"Install Istio",id:"install-istio",level:3},{value:"Install Vault",id:"install-vault",level:2},{value:"Setup Vault server",id:"setup-vault-server",level:2},{value:"With docker",id:"with-docker",level:3},{value:"With the CLI",id:"with-the-cli",level:3},{value:"Deploy a <code>Peer</code> organization",id:"deploy-a-peer-organization",level:2},{value:"Setup certificates for Org1MSP in Vault",id:"setup-certificates-for-org1msp-in-vault",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Configure Internal DNS",id:"configure-internal-dns",level:3},{value:"Configure Storage Class",id:"configure-storage-class",level:3},{value:"Create a secret for hashicorp vault",id:"create-a-secret-for-hashicorp-vault",level:3},{value:"Deploy a peer",id:"deploy-a-peer",level:3},{value:"Deploy an <code>Orderer</code> organization",id:"deploy-an-orderer-organization",level:2},{value:"Setup CAs in Vault",id:"setup-cas-in-vault",level:3},{value:"Deploy orderer",id:"deploy-orderer",level:3},{value:"Create channel",id:"create-channel",level:2},{value:"Register and enrolling OrdererMSP identity",id:"register-and-enrolling-orderermsp-identity",level:3},{value:"Register and enrolling Org1MSP identity",id:"register-and-enrolling-org1msp-identity",level:3},{value:"Create main channel",id:"create-main-channel",level:3},{value:"Join peer to the channel",id:"join-peer-to-the-channel",level:2},{value:"Install a chaincode",id:"install-a-chaincode",level:2},{value:"Prepare connection string for a peer",id:"prepare-connection-string-for-a-peer",level:3},{value:"Create metadata file",id:"create-metadata-file",level:3},{value:"Prepare connection file",id:"prepare-connection-file",level:3},{value:"Deploy chaincode container on cluster",id:"deploy-chaincode-container-on-cluster",level:2},{value:"Check installed chaincodes",id:"check-installed-chaincodes",level:2},{value:"Approve chaincode",id:"approve-chaincode",level:2},{value:"Commit chaincode",id:"commit-chaincode",level:2},{value:"Invoke a transaction on the channel",id:"invoke-a-transaction-on-the-channel",level:2},{value:"Query assets in the channel",id:"query-assets-in-the-channel",level:2},{value:"Cleanup the environment",id:"cleanup-the-environment",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Chaincode installation/build error",id:"chaincode-installationbuild-error",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"hashicorp-vault-integration-with-bevel-operator",children:"HashiCorp Vault Integration with Bevel Operator"})}),"\n",(0,a.jsx)(n.p,{children:"This workshop provides a comprehensive, hands-on guide to integrating HashiCorp Vault with the Bevel Operator for Hyperledger Fabric. You'll learn how to securely manage certificates, private keys, and cryptographic materials using Vault's advanced secrets management capabilities."}),"\n",(0,a.jsx)(n.h2,{id:"why-hashicorp-vault",children:"Why HashiCorp Vault?"}),"\n",(0,a.jsx)(n.p,{children:"HashiCorp Vault is essential for production Hyperledger Fabric deployments because it provides:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Secure Certificate Management"}),": Centralized storage and lifecycle management of TLS certificates"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Private Key Protection"}),": Encrypted storage of sensitive cryptographic materials"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Dynamic Secrets"}),": On-demand generation of credentials with automatic rotation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Audit Trail"}),": Complete logging of all secret access for compliance"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Access Control"}),": Fine-grained policies for who can access what secrets"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"High Availability"}),": Clustered deployment for production resilience"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(n.p,{children:"Before starting this workshop, ensure you have:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A Kubernetes cluster (KinD, K3D, or production cluster)"}),"\n",(0,a.jsx)(n.li,{children:"kubectl configured and working"}),"\n",(0,a.jsx)(n.li,{children:"Helm installed"}),"\n",(0,a.jsx)(n.li,{children:"HashiCorp Vault CLI installed"}),"\n",(0,a.jsx)(n.li,{children:"Basic understanding of Hyperledger Fabric concepts"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"workshop-overview",children:"Workshop Overview"}),"\n",(0,a.jsx)(n.p,{children:"In this workshop, you will:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Set up HashiCorp Vault"})," - Initialize and configure Vault for certificate management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Configure Bevel Operator"})," - Install and configure the operator to use Vault"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Deploy Certificate Authorities"})," - Create CAs with Vault-backed certificate storage"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Deploy Network Components"})," - Create peers and orderers using Vault-managed certificates"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Create and Manage Channels"})," - Set up channels with Vault-secured identities"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Deploy Chaincode"})," - Install and instantiate chaincode with secure credential management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test the Network"})," - Verify the complete setup works end-to-end"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,a.jsx)(n.h1,{id:"tutorial",children:"Tutorial"}),"\n",(0,a.jsx)(n.p,{children:"Resources:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.polarsparc.com/xhtml/Hyperledger-ARM-Build.html",children:"Hyperledger Fabric build ARM"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"create-kubernetes-cluster",children:"Create Kubernetes Cluster"}),"\n",(0,a.jsx)(n.p,{children:"To start deploying our red fabric we have to have a Kubernetes cluster. For this we will use KinD."}),"\n",(0,a.jsx)(n.p,{children:"Ensure you have these ports available before creating the cluster:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"80"}),"\n",(0,a.jsx)(n.li,{children:"443"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"If these ports are not available this tutorial will not work."}),"\n",(0,a.jsx)(n.h3,{id:"using-k3d",children:"Using K3D"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'k3d cluster create  -p "80:30949@agent:0" -p "443:30950@agent:0" --agents 2 k8s-hlf\n'})}),"\n",(0,a.jsx)(n.h3,{id:"using-kind",children:"Using KinD"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cat << EOF > kind-config.yaml\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  image: kindest/node:v1.30.2\n  extraPortMappings:\n  - containerPort: 30949\n    hostPort: 80\n  - containerPort: 30950\n    hostPort: 443\nEOF\n\nkind create cluster --config=./kind-config.yaml\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"install-kubernetes-operator",children:"Install Kubernetes operator"}),"\n",(0,a.jsx)(n.p,{children:"In this step we are going to install the kubernetes operator for Fabric, this will install:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"CRD (Custom Resource Definitions) to deploy Certification Fabric Peers, Orderers and Authorities"}),"\n",(0,a.jsx)(n.li,{children:"Deploy the program to deploy the nodes in Kubernetes"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["To install helm: ",(0,a.jsx)(n.a,{href:"https://helm.sh/docs/intro/install/",children:"https://helm.sh/docs/intro/install/"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"helm repo add kfs https://kfsoftware.github.io/hlf-helm-charts --force-update\n\nhelm install hlf-operator --version=1.13.0 -- kfs/hlf-operator\n"})}),"\n",(0,a.jsx)(n.h3,{id:"install-the-kubectl-plugin",children:"Install the Kubectl plugin"}),"\n",(0,a.jsxs)(n.p,{children:["To install the kubectl plugin, you must first install Krew:\n",(0,a.jsx)(n.a,{href:"https://krew.sigs.k8s.io/docs/user-guide/setup/install/",children:"https://krew.sigs.k8s.io/docs/user-guide/setup/install/"})]}),"\n",(0,a.jsx)(n.p,{children:"Afterwards, the plugin can be installed with the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl krew install hlf\n"})}),"\n",(0,a.jsx)(n.h3,{id:"install-istio",children:"Install Istio"}),"\n",(0,a.jsx)(n.p,{children:"Install Istio binaries on the machine:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.23.3 sh -\n"})}),"\n",(0,a.jsx)(n.p,{children:"Install Istio on the Kubernetes cluster:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'\nkubectl create namespace istio-system\n\nexport ISTIO_PATH=$(echo $PWD/istio-*/bin)\nexport PATH="$PATH:$ISTIO_PATH"\n\nistioctl operator init\n\nkubectl apply -f - <<EOF\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nmetadata:\n  name: istio-gateway\n  namespace: istio-system\nspec:\n  addonComponents:\n    grafana:\n      enabled: false\n    kiali:\n      enabled: false\n    prometheus:\n      enabled: false\n    tracing:\n      enabled: false\n  components:\n    ingressGateways:\n      - enabled: true\n        k8s:\n          hpaSpec:\n            minReplicas: 1\n          resources:\n            limits:\n              cpu: 500m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 128Mi\n          service:\n            ports:\n              - name: http\n                port: 80\n                targetPort: 8080\n                nodePort: 30949\n              - name: https\n                port: 443\n                targetPort: 8443\n                nodePort: 30950\n            type: NodePort\n        name: istio-ingressgateway\n    pilot:\n      enabled: true\n      k8s:\n        hpaSpec:\n          minReplicas: 1\n        resources:\n          limits:\n            cpu: 300m\n            memory: 512Mi\n          requests:\n            cpu: 100m\n            memory: 128Mi\n  meshConfig:\n    accessLogFile: /dev/stdout\n    enableTracing: false\n    outboundTrafficPolicy:\n      mode: ALLOW_ANY\n  profile: default\n\nEOF\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"install-vault",children:"Install Vault"}),"\n",(0,a.jsx)(n.p,{children:"Here's how to install Vault on Linux:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"\nsudo apt-get update && sudo apt-get install vault\n'})}),"\n",(0,a.jsx)(n.p,{children:"Here's how to install Vault on MacOS:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"brew tap hashicorp/tap\nbrew install hashicorp/tap/vault\n"})}),"\n",(0,a.jsx)(n.h2,{id:"setup-vault-server",children:"Setup Vault server"}),"\n",(0,a.jsx)(n.h3,{id:"with-docker",children:"With docker"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Run HashiCorp Vault in development mode (in-memory storage)\ndocker run -d \\\n  --name vault-dev \\\n  -p 8200:8200 \\\n  -e 'VAULT_DEV_ROOT_TOKEN_ID=my-dev-root-token' \\\n  -e 'VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200' \\\n  hashicorp/vault:latest\n"})}),"\n",(0,a.jsx)(n.h3,{id:"with-the-cli",children:"With the CLI"}),"\n",(0,a.jsx)(n.p,{children:"You'll need to run the following command and leave it running to start the Vault server:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"vault server -dev -dev-root-token-id=my-dev-root-token -dev-listen-address=0.0.0.0:8200\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"deploy-a-peer-organization",children:["Deploy a ",(0,a.jsx)(n.code,{children:"Peer"})," organization"]}),"\n",(0,a.jsx)(n.h3,{id:"setup-certificates-for-org1msp-in-vault",children:"Setup certificates for Org1MSP in Vault"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'export VAULT_ADDR=\'http://localhost:8200\'\nexport VAULT_TOKEN=\'my-dev-root-token\'\n\n# Enable PKI secrets engine for peer organization\nvault secrets enable -path=pki pki\n\n# Configure PKI settings\nvault secrets tune -max-lease-ttl=87600h pki\n\n# Generate root certificate for signing\nvault write pki/root/generate/internal \\\n    common_name="Org1MSP Root Sign CA" \\\n    ttl=87600h \\\n    issuer_name="signing-ca" \\\n    key_type="ec" \\\n    key_bits=256\n\n# Generate TLS root certificate \nvault write pki/root/generate/internal \\\n    common_name="Org1MSP TLS Root CA" \\\n    ttl=87600h \\\n    issuer_name="tls-ca" \\\n    key_type="ec" \\\n    key_bits=256\n\n# Create roles for signing certificates\nvault write pki/roles/peer-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="peer" \\\n    organization="Org1MSP" \\\n    issuer_ref="signing-ca"\n\nvault write pki/roles/orderer-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="orderer" \\\n    organization="Org1MSP" \\\n    issuer_ref="signing-ca"\n\nvault write pki/roles/client-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="client" \\\n    organization="Org1MSP" \\\n    issuer_ref="signing-ca"\n\nvault write pki/roles/admin-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="admin" \\\n    organization="Org1MSP" \\\n    issuer_ref="signing-ca"\n\n# Create roles for TLS certificates\nvault write pki/roles/peer-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="peer" \\\n    organization="Org1MSP"\n\nvault write pki/roles/orderer-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="orderer" \\\n    organization="Org1MSP"\n\nvault write pki/roles/client-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="client" \\\n    organization="Org1MSP"\n\nvault write pki/roles/admin-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="admin" \\\n    organization="Org1MSP"\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"export PEER_IMAGE=hyperledger/fabric-peer\nexport PEER_VERSION=3.1.0\n\nexport ORDERER_IMAGE=hyperledger/fabric-orderer\nexport ORDERER_VERSION=3.1.0\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"configure-internal-dns",children:"Configure Internal DNS"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f - <<EOF\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: coredns\n  namespace: kube-system\ndata:\n  Corefile: |\n    .:53 {\n        errors\n        health {\n           lameduck 5s\n        }\n        rewrite name regex (.*)\\.localho\\.st istio-ingressgateway.istio-system.svc.cluster.local\n        hosts {\n          fallthrough\n        }\n        ready\n        kubernetes cluster.local in-addr.arpa ip6.arpa {\n           pods insecure\n           fallthrough in-addr.arpa ip6.arpa\n           ttl 30\n        }\n        prometheus :9153\n        forward . /etc/resolv.conf {\n           max_concurrent 1000\n        }\n        cache 30\n        loop\n        reload\n        loadbalance\n    }\nEOF\n"})}),"\n",(0,a.jsx)(n.h3,{id:"configure-storage-class",children:"Configure Storage Class"}),"\n",(0,a.jsx)(n.p,{children:"Set storage class depending on the Kubernetes cluster you are using:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# for Kind\nexport SC_NAME=standard\n# for K3D\nexport SC_NAME=local-path\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-a-secret-for-hashicorp-vault",children:"Create a secret for hashicorp vault"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl create secret generic vault-token --from-literal=token=my-dev-root-token\n"})}),"\n",(0,a.jsx)(n.h3,{id:"deploy-a-peer",children:"Deploy a peer"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# this needs to be accessible from the cluster\nexport VAULT_ADDR="http://192.168.0.20:8200"\n\nkubectl hlf peer create \\\n    --statedb=leveldb \\\n    --image=$PEER_IMAGE \\\n    --version=$PEER_VERSION \\\n    --storage-class=$SC_NAME \\\n    --enroll-id=peer \\\n    --mspid=Org1MSP \\\n    --enroll-pw=peerpw \\\n    --capacity=5Gi \\\n    --name=org1-peer0 \\\n    --hosts=peer0-org1.localho.st \\\n    --istio-port=443 \\\n    --credential-store=vault \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="vault-token" \\\n    --vault-token-secret-namespace="default" \\\n    --vault-token-secret-key="token" \\\n    --vault-pki-path="pki" \\\n    --vault-role="peer-sign" \\\n    --vault-ttl="8760h" \\\n    --tls-vault-address="$VAULT_ADDR" \\\n    --tls-vault-token-secret="vault-token" \\\n    --tls-vault-token-secret-namespace="default" \\\n    --tls-vault-token-secret-key="token" \\\n    --tls-vault-pki-path="pki" \\\n    --tls-vault-role="peer-tls" \\\n    --tls-vault-ttl="8760h"\n\n\nkubectl wait --timeout=180s --for=condition=Running fabricpeers.hlf.kungfusoftware.es --all\n'})}),"\n",(0,a.jsx)(n.p,{children:"Check that the peer is deployed and works:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl s_client -connect peer0-org1.localho.st:443\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"deploy-an-orderer-organization",children:["Deploy an ",(0,a.jsx)(n.code,{children:"Orderer"})," organization"]}),"\n",(0,a.jsxs)(n.p,{children:["To deploy an ",(0,a.jsx)(n.code,{children:"Orderer"})," organization we have to:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Setup CAs in Vault"}),"\n",(0,a.jsx)(n.li,{children:"Create orderer"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"setup-cas-in-vault",children:"Setup CAs in Vault"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'export VAULT_ADDR=\'http://localhost:8200\'\nexport VAULT_TOKEN=\'my-dev-root-token\'\n\n# Enable PKI secrets engine for orderer organization\nvault secrets enable -path=pki_orderer pki\n\n# Configure PKI settings\nvault secrets tune -max-lease-ttl=87600h pki_orderer\n\n\n# Generate root certificate for signing\nvault write pki_orderer/root/generate/internal \\\n    common_name="OrdererMSP Signing Root CA" \\\n    ttl=87600h \\\n    issuer_name="signing-ca" \\\n    key_type="ec" \\\n    key_bits=256\n\n# Generate TLS root certificate \nvault write pki_orderer/root/generate/internal \\\n    common_name="OrdererMSP TLS Root CA" \\\n    ttl=87600h \\\n    issuer_name="tls-ca" \\\n    key_type="ec" \\\n    key_bits=256\n\n# Create roles for signing certificates\nvault write pki_orderer/roles/peer-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="peer" \\\n    organization="OrdererMSP" \\\n    issuer_ref="signing-ca"\n\nvault write pki_orderer/roles/orderer-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="orderer" \\\n    organization="OrdererMSP" \\\n    issuer_ref="signing-ca"\n\nvault write pki_orderer/roles/client-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="client" \\\n    organization="OrdererMSP" \\\n    issuer_ref="signing-ca"\n\nvault write pki_orderer/roles/admin-sign \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="admin" \\\n    organization="OrdererMSP" \\\n    issuer_ref="signing-ca"\n\n# Create roles for TLS certificates\nvault write pki_orderer/roles/peer-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="peer" \\\n    organization="OrdererMSP"\n\nvault write pki_orderer/roles/orderer-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="orderer" \\\n    organization="OrdererMSP"\n\nvault write pki_orderer/roles/client-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="client" \\\n    organization="OrdererMSP"\n\nvault write pki_orderer/roles/admin-tls \\\n    issuer_ref="tls-ca" \\\n    allow_subdomains=true \\\n    allow_any_name=true \\\n    max_ttl="87600h" \\\n    key_type="ec" \\\n    key_bits=256 \\\n    ou="admin" \\\n    organization="OrdererMSP"\n\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"deploy-orderer",children:"Deploy orderer"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'\nexport VAULT_ADDR="http://192.168.0.20:8200"\nexport VAULT_TOKEN_NAME="vault-token"\nexport VAULT_TOKEN_NS="default"\nexport VAULT_TOKEN_KEY="token"\nexport VAULT_CA_PATH="pki_orderer"\nexport VAULT_ROLE_SIGN="orderer-sign"\nexport VAULT_ROLE_TLS="orderer-tls"\n\n\nexport NODE_NUM=0\nkubectl hlf ordnode create \\\n    --credential-store=vault \\\n    --image=$ORDERER_IMAGE \\\n    --version=$ORDERER_VERSION \\\n    --storage-class=$SC_NAME \\\n    --enroll-id=orderer \\\n    --mspid=OrdererMSP \\\n    --enroll-pw=ordererpw \\\n    --capacity=2Gi \\\n    --name=ord-node1 \\\n    --hosts=orderer${NODE_NUM}-ord.localho.st \\\n    --admin-hosts=admin-orderer${NODE_NUM}-ord.localho.st \\\n    --istio-port=443 \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="$VAULT_TOKEN_NAME" \\\n    --vault-token-secret-namespace="$VAULT_TOKEN_NS" \\\n    --vault-token-secret-key="$VAULT_TOKEN_KEY" \\\n    --vault-pki-path="$VAULT_CA_PATH" \\\n    --vault-role="$VAULT_ROLE_SIGN" \\\n    --vault-ttl="8760h" \\\n    --tls-vault-address="$VAULT_ADDR" \\\n    --tls-vault-token-secret="$VAULT_TOKEN_NAME" \\\n    --tls-vault-token-secret-namespace="$VAULT_TOKEN_NS" \\\n    --tls-vault-token-secret-key="$VAULT_TOKEN_KEY" \\\n    --tls-vault-pki-path="$VAULT_CA_PATH" \\\n    --tls-vault-role="$VAULT_ROLE_TLS" \\\n    --tls-vault-ttl="8760h"\n\n\nexport NODE_NUM=1\nkubectl hlf ordnode create \\\n    --credential-store=vault \\\n    --image=$ORDERER_IMAGE \\\n    --version=$ORDERER_VERSION \\\n    --storage-class=$SC_NAME \\\n    --enroll-id=orderer \\\n    --mspid=OrdererMSP \\\n    --enroll-pw=ordererpw \\\n    --capacity=2Gi \\\n    --name=ord-node2 \\\n    --hosts=orderer${NODE_NUM}-ord.localho.st \\\n    --admin-hosts=admin-orderer${NODE_NUM}-ord.localho.st \\\n    --istio-port=443 \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="$VAULT_TOKEN_NAME" \\\n    --vault-token-secret-namespace="$VAULT_TOKEN_NS" \\\n    --vault-token-secret-key="$VAULT_TOKEN_KEY" \\\n    --vault-pki-path="$VAULT_CA_PATH" \\\n    --vault-role="$VAULT_ROLE_SIGN" \\\n    --vault-ttl="8760h" \\\n    --tls-vault-address="$VAULT_ADDR" \\\n    --tls-vault-token-secret="$VAULT_TOKEN_NAME" \\\n    --tls-vault-token-secret-namespace="$VAULT_TOKEN_NS" \\\n    --tls-vault-token-secret-key="$VAULT_TOKEN_KEY" \\\n    --tls-vault-pki-path="$VAULT_CA_PATH" \\\n    --tls-vault-role="$VAULT_ROLE_TLS" \\\n    --tls-vault-ttl="8760h"\n\n\nexport NODE_NUM=2\nkubectl hlf ordnode create \\\n    --credential-store=vault \\\n    --image=$ORDERER_IMAGE \\\n    --version=$ORDERER_VERSION \\\n    --storage-class=$SC_NAME \\\n    --enroll-id=orderer \\\n    --mspid=OrdererMSP \\\n    --enroll-pw=ordererpw \\\n    --capacity=2Gi \\\n    --name=ord-node3 \\\n    --hosts=orderer${NODE_NUM}-ord.localho.st \\\n    --admin-hosts=admin-orderer${NODE_NUM}-ord.localho.st \\\n    --istio-port=443 \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="$VAULT_TOKEN_NAME" \\\n    --vault-token-secret-namespace="$VAULT_TOKEN_NS" \\\n    --vault-token-secret-key="$VAULT_TOKEN_KEY" \\\n    --vault-pki-path="$VAULT_CA_PATH" \\\n    --vault-role="$VAULT_ROLE_SIGN" \\\n    --vault-ttl="8760h" \\\n    --tls-vault-address="$VAULT_ADDR" \\\n    --tls-vault-token-secret="$VAULT_TOKEN_NAME" \\\n    --tls-vault-token-secret-namespace="$VAULT_TOKEN_NS" \\\n    --tls-vault-token-secret-key="$VAULT_TOKEN_KEY" \\\n    --tls-vault-pki-path="$VAULT_CA_PATH" \\\n    --tls-vault-role="$VAULT_ROLE_TLS" \\\n    --tls-vault-ttl="8760h"\n\n\nexport NODE_NUM=3\nkubectl hlf ordnode create \\\n    --credential-store=vault \\\n    --image=$ORDERER_IMAGE \\\n    --version=$ORDERER_VERSION \\\n    --storage-class=$SC_NAME \\\n    --enroll-id=orderer \\\n    --mspid=OrdererMSP \\\n    --enroll-pw=ordererpw \\\n    --capacity=2Gi \\\n    --name=ord-node4 \\\n    --hosts=orderer${NODE_NUM}-ord.localho.st \\\n    --admin-hosts=admin-orderer${NODE_NUM}-ord.localho.st \\\n    --istio-port=443 \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="$VAULT_TOKEN_NAME" \\\n    --vault-token-secret-namespace="$VAULT_TOKEN_NS" \\\n    --vault-token-secret-key="$VAULT_TOKEN_KEY" \\\n    --vault-pki-path="$VAULT_CA_PATH" \\\n    --vault-role="$VAULT_ROLE_SIGN" \\\n    --vault-ttl="8760h" \\\n    --tls-vault-address="$VAULT_ADDR" \\\n    --tls-vault-token-secret="$VAULT_TOKEN_NAME" \\\n    --tls-vault-token-secret-namespace="$VAULT_TOKEN_NS" \\\n    --tls-vault-token-secret-key="$VAULT_TOKEN_KEY" \\\n    --tls-vault-pki-path="$VAULT_CA_PATH" \\\n    --tls-vault-role="$VAULT_ROLE_TLS" \\\n    --tls-vault-ttl="8760h"\n\n\n\nkubectl wait --timeout=180s --for=condition=Running fabricorderernodes.hlf.kungfusoftware.es --all\n'})}),"\n",(0,a.jsx)(n.p,{children:"Check that the orderer is running:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl get pods\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl s_client -connect orderer0-ord.localho.st:443\nopenssl s_client -connect orderer1-ord.localho.st:443\nopenssl s_client -connect orderer2-ord.localho.st:443\nopenssl s_client -connect orderer3-ord.localho.st:443\n"})}),"\n",(0,a.jsx)(n.h2,{id:"create-channel",children:"Create channel"}),"\n",(0,a.jsx)(n.p,{children:"To create the channel we need to first create the wallet secret, which will contain the identities used by the operator to manage the channel"}),"\n",(0,a.jsx)(n.h3,{id:"register-and-enrolling-orderermsp-identity",children:"Register and enrolling OrdererMSP identity"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'\nkubectl hlf identity create --name ord-ca-sign --namespace default \\\n    --mspid OrdererMSP  \\\n    --credential-store=vault \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="vault-token" \\\n    --vault-token-secret-namespace="default" \\\n    --vault-token-secret-key="token" \\\n    --vault-pki-path="pki_orderer" \\\n    --vault-role="admin-sign" \\\n    --vault-ttl="8760h"\n\nkubectl hlf identity create --name ord-ca-tls --namespace default \\\n    --mspid OrdererMSP  \\\n    --credential-store=vault \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="vault-token" \\\n    --vault-token-secret-namespace="default" \\\n    --vault-token-secret-key="token" \\\n    --vault-pki-path="pki_orderer" \\\n    --vault-role="admin-tls" \\\n    --vault-ttl="8760h"\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"register-and-enrolling-org1msp-identity",children:"Register and enrolling Org1MSP identity"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# enroll\nkubectl hlf identity create --name org1-admin --namespace default \\\n    --mspid Org1MSP  \\\n    --credential-store=vault \\\n    --vault-address="$VAULT_ADDR" \\\n    --vault-token-secret="vault-token" \\\n    --vault-token-secret-namespace="default" \\\n    --vault-token-secret-key="token" \\\n    --vault-pki-path="pki" \\\n    --vault-role="admin-sign" \\\n    --vault-ttl="8760h"\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-main-channel",children:"Create main channel"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'\nexport PEER_ORG_SIGN_CERT=$(vault read pki/issuer/signing-ca --format=json | jq -r \'.data.certificate\' | sed -e "s/^/${IDENT_8}/" )\nexport PEER_ORG_TLS_CERT=$(vault read pki/issuer/tls-ca --format=json | jq -r \'.data.certificate\' | sed -e "s/^/${IDENT_8}/" )\n\nexport IDENT_8=$(printf "%8s" "")\nexport ORDERER_TLS_CERT=$(vault read pki_orderer/issuer/tls-ca --format=json | jq -r \'.data.certificate\' | sed -e "s/^/${IDENT_8}/" )\nexport ORDERER_SIGN_CERT=$(vault read pki_orderer/issuer/signing-ca --format=json | jq -r \'.data.certificate\' | sed -e "s/^/${IDENT_8}/" )\n\n\nexport ORDERER0_TLS_CERT=$(kubectl get fabricorderernodes ord-node1 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\nexport ORDERER1_TLS_CERT=$(kubectl get fabricorderernodes ord-node2 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\nexport ORDERER2_TLS_CERT=$(kubectl get fabricorderernodes ord-node3 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\nexport ORDERER3_TLS_CERT=$(kubectl get fabricorderernodes ord-node4 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\n\nkubectl apply -f - <<EOF\napiVersion: hlf.kungfusoftware.es/v1alpha1\nkind: FabricMainChannel\nmetadata:\n  name: demo\nspec:\n  name: demo\n  adminOrdererOrganizations:\n    - mspID: OrdererMSP\n  adminPeerOrganizations:\n    - mspID: Org1MSP\n  channelConfig:\n    application:\n      acls: null\n      capabilities:\n        - V2_0\n        - V2_5\n      policies: null\n    capabilities:\n      - V2_0\n    orderer:\n      batchSize:\n        absoluteMaxBytes: 1048576\n        maxMessageCount: 10\n        preferredMaxBytes: 524288\n      batchTimeout: 2s\n      capabilities:\n        - V2_0\n      etcdRaft:\n        options:\n          electionTick: 10\n          heartbeatTick: 1\n          maxInflightBlocks: 5\n          snapshotIntervalSize: 16777216\n          tickInterval: 500ms\n      ordererType: etcdraft\n      policies: null\n      state: STATE_NORMAL\n    policies: null\n  externalOrdererOrganizations: []\n  externalPeerOrganizations: []\n  peerOrganizations:\n    - mspID: Org1MSP\n      signCACert: |\n${PEER_ORG_SIGN_CERT}\n      tlsCACert: |\n${PEER_ORG_TLS_CERT}\n\n  identities:\n    OrdererMSP-tls:\n      secretKey: user.yaml\n      secretName: ord-ca-tls\n      secretNamespace: default\n    OrdererMSP-sign:\n      secretKey: user.yaml\n      secretName: ord-ca-sign\n      secretNamespace: default\n    Org1MSP:\n      secretKey: user.yaml\n      secretName: org1-admin\n      secretNamespace: default\n\n  ordererOrganizations:\n    - externalOrderersToJoin:\n        - host: ord-node1.default\n          port: 7053\n        - host: ord-node2.default\n          port: 7053\n        - host: ord-node3.default\n          port: 7053\n        - host: ord-node4.default\n          port: 7053\n      tlsCACert: |\n${ORDERER_TLS_CERT}\n      signCACert: |\n${ORDERER_SIGN_CERT}\n      mspID: OrdererMSP\n      ordererEndpoints:\n        - orderer0-ord.localho.st:443\n        - orderer1-ord.localho.st:443\n        - orderer2-ord.localho.st:443\n        - orderer3-ord.localho.st:443\n      orderersToJoin: []\n  orderers:\n    - host: orderer0-ord.localho.st\n      port: 443\n      tlsCert: |-\n${ORDERER0_TLS_CERT}\n    - host: orderer1-ord.localho.st\n      port: 443\n      tlsCert: |-\n${ORDERER1_TLS_CERT}\n    - host: orderer2-ord.localho.st\n      port: 443\n      tlsCert: |-\n${ORDERER2_TLS_CERT}\n    - host: orderer3-ord.localho.st\n      port: 443\n      tlsCert: |-\n${ORDERER3_TLS_CERT}\n\nEOF\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"join-peer-to-the-channel",children:"Join peer to the channel"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'\nexport IDENT_8=$(printf "%8s" "")\nexport ORDERER0_TLS_CERT=$(kubectl get fabricorderernodes ord-node1 -o=jsonpath=\'{.status.tlsCert}\' | sed -e "s/^/${IDENT_8}/" )\n\nkubectl apply -f - <<EOF\napiVersion: hlf.kungfusoftware.es/v1alpha1\nkind: FabricFollowerChannel\nmetadata:\n  name: demo-org1msp\nspec:\n  anchorPeers:\n    - host: peer0-org1.localho.st\n      port: 443\n  hlfIdentity:\n    secretKey: user.yaml\n    secretName: org1-admin\n    secretNamespace: default\n  mspId: Org1MSP\n  name: demo\n  externalPeersToJoin: []\n  orderers:\n    - certificate: |\n${ORDERER0_TLS_CERT}\n      url: grpcs://orderer0-ord.localho.st:443\n  peersToJoin:\n    - name: org1-peer0\n      namespace: default\nEOF\n\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"install-a-chaincode",children:"Install a chaincode"}),"\n",(0,a.jsx)(n.h3,{id:"prepare-connection-string-for-a-peer",children:"Prepare connection string for a peer"}),"\n",(0,a.jsx)(n.p,{children:"To prepare the connection string, we have to:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Create network config connection string for organization Org1MSP and OrdererMSP"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Get the network config from the cluster"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Register a user in the certification authority for signing"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl hlf networkconfig create --name=org1-cp \\\n  -o Org1MSP -o OrdererMSP -c demo \\\n  --identities=org1-admin.default --secret=org1-cp  \n"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Get the certificates using the user created above"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'kubectl get secret org1-cp -o jsonpath="{.data.config\\.yaml}" | base64 --decode > org1.yaml\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-metadata-file",children:"Create metadata file"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# remove the code.tar.gz chaincode.tgz if they exist\nrm code.tar.gz chaincode.tgz\nexport CHAINCODE_NAME=asset\nexport CHAINCODE_LABEL=asset\ncat << METADATA-EOF > "metadata.json"\n{\n    "type": "ccaas",\n    "label": "${CHAINCODE_LABEL}"\n}\nMETADATA-EOF\n## chaincode as a service\n'})}),"\n",(0,a.jsx)(n.h3,{id:"prepare-connection-file",children:"Prepare connection file"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'cat > "connection.json" <<CONN_EOF\n{\n  "address": "${CHAINCODE_NAME}:7052",\n  "dial_timeout": "10s",\n  "tls_required": false\n}\nCONN_EOF\n\ntar cfz code.tar.gz connection.json\ntar cfz chaincode.tgz metadata.json code.tar.gz\nexport PACKAGE_ID=$(kubectl hlf chaincode calculatepackageid --path=chaincode.tgz --language=node --label=$CHAINCODE_LABEL)\necho "PACKAGE_ID=$PACKAGE_ID"\n\nkubectl hlf chaincode install --path=./chaincode.tgz \\\n    --config=org1.yaml --language=golang --label=$CHAINCODE_LABEL --user=org1-admin-default --peer=org1-peer0.default\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"deploy-chaincode-container-on-cluster",children:"Deploy chaincode container on cluster"}),"\n",(0,a.jsx)(n.p,{children:"The following command will create or update the CRD based on the packageID, chaincode name, and docker image."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl hlf externalchaincode sync --image=kfsoftware/chaincode-external:latest \\\n    --name=$CHAINCODE_NAME \\\n    --namespace=default \\\n    --package-id=$PACKAGE_ID \\\n    --tls-required=false \\\n    --replicas=1\n"})}),"\n",(0,a.jsx)(n.h2,{id:"check-installed-chaincodes",children:"Check installed chaincodes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl hlf chaincode queryinstalled --config=org1.yaml --user=org1-admin-default --peer=org1-peer0.default\n"})}),"\n",(0,a.jsx)(n.h2,{id:"approve-chaincode",children:"Approve chaincode"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'export SEQUENCE=1\nexport VERSION="1.0"\nkubectl hlf chaincode approveformyorg --config=org1.yaml --user=org1-admin-default --peer=org1-peer0.default \\\n    --package-id=$PACKAGE_ID \\\n    --version "$VERSION" --sequence "$SEQUENCE" --name=asset \\\n    --policy="OR(\'Org1MSP.member\')" --channel=demo\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"commit-chaincode",children:"Commit chaincode"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'kubectl hlf chaincode commit --config=org1.yaml --user=org1-admin-default --mspid=Org1MSP \\\n    --version "$VERSION" --sequence "$SEQUENCE" --name=asset \\\n    --policy="OR(\'Org1MSP.member\')" --channel=demo\n'})}),"\n",(0,a.jsx)(n.h2,{id:"invoke-a-transaction-on-the-channel",children:"Invoke a transaction on the channel"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl hlf chaincode invoke --config=org1.yaml \\\n    --user=org1-admin-default --peer=org1-peer0.default \\\n    --chaincode=asset --channel=demo \\\n    --fcn=initLedger -a '[]'\n"})}),"\n",(0,a.jsx)(n.h2,{id:"query-assets-in-the-channel",children:"Query assets in the channel"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl hlf chaincode query --config=org1.yaml \\\n    --user=org1-admin-default --peer=org1-peer0.default \\\n    --chaincode=asset --channel=demo \\\n    --fcn=GetAllAssets -a '[]'\n"})}),"\n",(0,a.jsx)(n.p,{children:"At this point, you should have:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Ordering service with 1 nodes and a CA"}),"\n",(0,a.jsx)(n.li,{children:"Peer organization with a peer and a CA"}),"\n",(0,a.jsxs)(n.li,{children:["A channel ",(0,a.jsx)(n.strong,{children:"demo"})]}),"\n",(0,a.jsx)(n.li,{children:"A chaincode install in peer0"}),"\n",(0,a.jsx)(n.li,{children:"A chaincode approved and committed"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"If something went wrong or didn't work, please, open an issue."}),"\n",(0,a.jsx)(n.h2,{id:"cleanup-the-environment",children:"Cleanup the environment"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl delete fabricorderernodes.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabricpeers.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabriccas.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabricchaincode.hlf.kungfusoftware.es --all-namespaces --all\nkubectl delete fabricmainchannels --all-namespaces --all\nkubectl delete fabricfollowerchannels --all-namespaces --all\n"})}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(n.h3,{id:"chaincode-installationbuild-error",children:"Chaincode installation/build error"}),"\n",(0,a.jsxs)(n.p,{children:["Chaincode installation/build can fail due to unsupported local kubertenes version such as ",(0,a.jsx)(n.a,{href:"https://github.com/kubernetes/minikube",children:"minikube"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"$ kubectl hlf chaincode install --path=./fixtures/chaincodes/fabcar/go \\\n        --config=org1.yaml --language=golang --label=fabcar --user=org1-admin-default --peer=org1-peer0.default\n\nError: Transaction processing for endorser [192.168.49.2:31278]: Chaincode status Code: (500) UNKNOWN.\nDescription: failed to invoke backing implementation of 'InstallChaincode': could not build chaincode:\nexternal builder failed: external builder failed to build: external builder 'my-golang-builder' failed:\nexit status 1\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If your purpose is to test the hlf-operator please consider to switch to ",(0,a.jsx)(n.a,{href:"https://github.com/kubernetes-sigs/kind",children:"kind"})," that is tested and supported."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var t=r(6540);const a={},l=t.createContext(a);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);