"use strict";(self.webpackChunkwebsite_docs=self.webpackChunkwebsite_docs||[]).push([[7909],{9631:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>s});var a=r(4848),t=r(8453);const l={id:"getting-started",title:"Getting started"},i=void 0,c={id:"channel-management/getting-started",title:"Getting started",description:"There are two types of resources to manage a channel:",source:"@site/docs/channel-management/getting-started.md",sourceDirName:"channel-management",slug:"/channel-management/getting-started",permalink:"/bevel-operator-fabric/docs/channel-management/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/hyperledger-bevel/bevel-operator-fabric/edit/master/website/docs/channel-management/getting-started.md",tags:[],version:"current",frontMatter:{id:"getting-started",title:"Getting started"},sidebar:"mainSidebar",previous:{title:"Installing chaincodes with the FabricChaincodeInstall CRD",permalink:"/bevel-operator-fabric/docs/chaincode-deployment/install-crd"},next:{title:"Manage the channel",permalink:"/bevel-operator-fabric/docs/channel-management/manage"}},o={},s=[{value:"FabricMainChannel",id:"fabricmainchannel",level:3},{value:"FabricFollowerChannel",id:"fabricfollowerchannel",level:3},{value:"Wallet",id:"wallet",level:3},{value:"Enroll the orderer admin organization",id:"enroll-the-orderer-admin-organization",level:2},{value:"Enroll the admin peer organization",id:"enroll-the-admin-peer-organization",level:2},{value:"Create secret",id:"create-secret",level:2},{value:"Create the channel",id:"create-the-channel",level:2},{value:"Join the channel for Org1MSP",id:"join-the-channel-for-org1msp",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"There are two types of resources to manage a channel:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"FabricMainChannel"}),"\n",(0,a.jsx)(n.li,{children:"FabricFollowerChannel"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"fabricmainchannel",children:"FabricMainChannel"}),"\n",(0,a.jsx)(n.p,{children:"This resource creates and manages the channel configuration, including:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Configuration"}),"\n",(0,a.jsx)(n.li,{children:"Peer organizations"}),"\n",(0,a.jsx)(n.li,{children:"Orderer organizations"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"fabricfollowerchannel",children:"FabricFollowerChannel"}),"\n",(0,a.jsx)(n.p,{children:"This resource joins the channel and manages the channel configuration, including:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Anchor peers"}),"\n",(0,a.jsx)(n.li,{children:"Peers to join"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"wallet",children:"Wallet"}),"\n",(0,a.jsx)(n.p,{children:"For every resource we need a wallet to interact with the network."}),"\n",(0,a.jsx)(n.p,{children:"The FabricMainChannel requires a wallet with the admin identity of the orderer organization and the peer organizations that will manage the channel."}),"\n",(0,a.jsx)(n.p,{children:"The FabricFollowerChannel requires a wallet with the admin identity of the peer organization."}),"\n",(0,a.jsx)(n.h2,{id:"enroll-the-orderer-admin-organization",children:"Enroll the orderer admin organization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"CA_NAME=ord-ca\nCA_NAMESPACE=default\nCA_MSPID=OrdererMSP\nCA_TYPE=tlsca # can be `ca` or `tlsca`\nkubectl hlf ca register --name=$CA_NAME --namespace=$CA_NAMESPACE --user=admin --secret=adminpw --type=admin \\\n --enroll-id enroll --enroll-secret=enrollpw --mspid OrdererMSP\n\nkubectl hlf ca enroll --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user=admin --secret=adminpw --mspid $CA_MSPID \\\n    --ca-name $CA_TYPE  --output orderermsp.yaml\n"})}),"\n",(0,a.jsx)(n.h2,{id:"enroll-the-admin-peer-organization",children:"Enroll the admin peer organization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"CA_NAME=org1-ca\nCA_NAMESPACE=default\nCA_MSPID=Org1MSP\nCA_TYPE=ca # can be `ca` or `tlsca`\nkubectl hlf ca register --name=$CA_NAME --namespace=$CA_NAMESPACE --user=admin --secret=adminpw --type=admin \\\n --enroll-id enroll --enroll-secret=enrollpw --mspid Org1MSP\n\nkubectl hlf ca enroll --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user=admin --secret=adminpw --mspid $CA_MSPID \\\n    --ca-name $CA_TYPE  --output org1msp.yaml\n"})}),"\n",(0,a.jsx)(n.h2,{id:"create-secret",children:"Create secret"}),"\n",(0,a.jsx)(n.p,{children:"We need to create a secret for the operator to use the certificates to create the channel and update the channel configuration."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl create secret generic wallet --namespace=default \\\n        --from-file=org1msp.yaml=$PWD/org1msp.yaml \\\n        --from-file=orderermsp.yaml=$PWD/orderermsp.yaml\n"})}),"\n",(0,a.jsx)(n.h2,{id:"create-the-channel",children:"Create the channel"}),"\n",(0,a.jsx)(n.p,{children:"First, we need to obtain the orderer TLS certificate, this would need to be performed for each orderer that is in the consenters list."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl get fabricorderernodes ord-node1 \\\n    -o jsonpath='{.status.tlsCert}' > ./orderer-cert.pem\n"})}),"\n",(0,a.jsx)(n.p,{children:"Second, we create the main channel CRD and apply it."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'kubectl hlf channelcrd main create \\\n    --channel-name=demo \\\n    --name=demo \\\n    --orderer-orgs=OrdererMSP \\\n    --peer-orgs=Org1MSP \\\n    --admin-orderer-orgs=OrdererMSP \\\n    --admin-peer-orgs=Org1MSP \\\n    --secret-name=wallet \\\n    --secret-ns=default \\\n    --consenters=ord-node1.default:7050 \\\n    --consenter-certificates=./orderer-cert.pem \\\n    --identities="OrdererMSP;admin-tls-ordservice.yaml" \\\n    --identities="Org1MSP;peer-org1.yaml" \\\n    --consenters=ord-node1.default:7050 --consenter-certificates="orderer0-tls-cert.pem"\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"join-the-channel-for-org1msp",children:"Join the channel for Org1MSP"}),"\n",(0,a.jsx)(n.p,{children:"First, we need to obtain the orderer TLS certificate, this would need to be performed for each orderer that is in the consenters list."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl get fabricorderernodes ord-node1 \\\n    -o jsonpath='{.status.tlsCert}' > ./orderer-cert.pem\n"})}),"\n",(0,a.jsx)(n.p,{children:"Second, we create the main channel CRD and apply it."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'kubectl hlf channelcrd follower create \\\n    --channel-name=demo \\\n    --mspid=Org1MSP \\\n    --name="demo-org1msp" \\\n    --orderer-certificates="./orderer-cert.pem" \\\n    --orderer-urls="grpcs://ord-node1.default:7050" \\\n    --anchor-peers="org1-peer0:7051" \\\n    --peers="org1-peer0.default" \\\n    --secret-name=wallet \\\n    --secret-ns=default \\\n    --secret-key="peer-org1.yaml"\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var a=r(6540);const t={},l=a.createContext(t);function i(e){const n=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);