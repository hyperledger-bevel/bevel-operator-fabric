"use strict";(self.webpackChunkwebsite_docs=self.webpackChunkwebsite_docs||[]).push([[578],{195:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var s=r(4848),t=r(8453);const l={id:"enroll-users",title:"Register & Enroll users"},i=void 0,a={id:"user-guide/enroll-users",title:"Register & Enroll users",description:"Registering users",source:"@site/docs/user-guide/enroll-users.md",sourceDirName:"user-guide",slug:"/user-guide/enroll-users",permalink:"/bevel-operator-fabric/docs/user-guide/enroll-users",draft:!1,unlisted:!1,editUrl:"https://github.com/hyperledger-bevel/bevel-operator-fabric/edit/master/website/docs/user-guide/enroll-users.md",tags:[],version:"current",frontMatter:{id:"enroll-users",title:"Register & Enroll users"},sidebar:"mainSidebar",previous:{title:"Install Chaincode",permalink:"/bevel-operator-fabric/docs/user-guide/install-chaincode"},next:{title:"Develop chaincode locally",permalink:"/bevel-operator-fabric/docs/user-guide/develop-chaincode-locally"}},o={},c=[{value:"Registering users",id:"registering-users",level:2},{value:"Registering users with attributes",id:"registering-users-with-attributes",level:2},{value:"Enrolling users in the TLS CA",id:"enrolling-users-in-the-tls-ca",level:2},{value:"Enrolling users in the Sign CA",id:"enrolling-users-in-the-sign-ca",level:2},{value:"Enrolling users in the Sign CA with attributes",id:"enrolling-users-in-the-sign-ca-with-attributes",level:2}];function u(e){const n={code:"code",h2:"h2",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"registering-users",children:"Registering users"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ENROLL_ID=enroll # enroll id for the CA, default `enroll`\nENROLL_SECRET=enrollpw # enroll secret for the CA, default `enrollpw`\nUSER_TYPE=peer # can be `peer`, `orderer`, `client` or `admin`\nUSER_NAME=peer\nUSER_SECRET=peerpw\nMSP_ID=Org1MSP\nkubectl hlf ca register --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user $USER --secret=$USER_SECRET --type=$USER_TYPE \\\n    --enroll-id=$ENROLL_ID --enroll-secret=$ENROLL_SECRET \\\n    --mspid $MSP_ID\n"})}),"\n",(0,s.jsx)(n.h2,{id:"registering-users-with-attributes",children:"Registering users with attributes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'ENROLL_ID=enroll # enroll id for the CA, default `enroll`\nENROLL_SECRET=enrollpw # enroll secret for the CA, default `enrollpw`\nUSER_TYPE=peer # can be `peer`, `orderer`, `client` or `admin`\nUSER_NAME=peer\nUSER_SECRET=peerpw\nMSP_ID=Org1MSP\nkubectl hlf ca register --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user $USER --secret=$USER_SECRET --type=$USER_TYPE \\\n    --enroll-id=$ENROLL_ID --enroll-secret=$ENROLL_SECRET \\\n    --mspid $MSP_ID --attributes="isAdmin=true,anotherAttribute=foo"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"enrolling-users-in-the-tls-ca",children:"Enrolling users in the TLS CA"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"CA_NAME=org1-ca\nCA_NAMESPACE=default\nCA_MSPID=Org1MSP\nCA_TYPE=ca # can be `ca` or `tlsca`\nkubectl hlf ca enroll --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user=admin --secret=adminpw --mspid $CA_MSPID \\\n    --ca-name $CA_TYPE  --output user.yaml \n"})}),"\n",(0,s.jsx)(n.h2,{id:"enrolling-users-in-the-sign-ca",children:"Enrolling users in the Sign CA"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"CA_NAME=org1-ca\nCA_NAMESPACE=default\nCA_MSPID=Org1MSP\nCA_TYPE=tlsca # can be `ca` or `tlsca`\nkubectl hlf ca enroll --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user=admin --secret=adminpw --mspid $CA_MSPID \\\n    --ca-name $CA_TYPE  --output user.yaml \n"})}),"\n",(0,s.jsx)(n.h2,{id:"enrolling-users-in-the-sign-ca-with-attributes",children:"Enrolling users in the Sign CA with attributes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'CA_NAME=org1-ca\nCA_NAMESPACE=default\nCA_MSPID=Org1MSP\nCA_TYPE=tlsca # can be `ca` or `tlsca`\nkubectl hlf ca enroll --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user=admin --secret=adminpw --mspid $CA_MSPID \\\n    --ca-name $CA_TYPE  --output user.yaml --attributes="isAdmin,anotherAttribute:opt" # for optional attributes\n'})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const t={},l=s.createContext(t);function i(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);